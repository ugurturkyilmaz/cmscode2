definition {

	macro getClientVersion {
		var projectDir = PropsUtil.get("project.dir");
		var fileContent = FileUtil.read("${projectDir}/modules/apps/portal-search-elasticsearch7/portal-search-elasticsearch7-impl/build.gradle");
		var clientVersion = RegexUtil.replace("${fileContent}", "elasticsearchClientVersion = \"(\d+\.\d+\.\d+)", "1");

		echo("Elasticsearch client version: ${clientVersion}");

		return "${clientVersion}";
	}

	macro getServerPort {
		var remoteEnabled = Elasticsearch.isRemoteMode();

		if ("${remoteEnabled}" == "true") {
			return "9200";
		}
		else {
			return "9201";
		}
	}

	macro getServerVersion {
		if (!(isSet(port))) {
			var port = Elasticsearch.getServerPort();
		}

		var portalHostname = PropsUtil.get("portal.hostname");
		var curl = "http://${portalHostname}:${port}";
		var serverInfo = JSONCurlUtil.get("${curl}");
		var serverVersion = RegexUtil.replace("${serverInfo}", "number\" : \"(\d+\.\d+\.\d+)", "1");

		echo("Version of the Elasticsearch server on port ${port}: ${serverVersion}");

		return "${serverVersion}";
	}

	macro isRemoteMode {
		var liferayHome = PropsUtil.get("liferay.home.dir.name");
		var fileLocation = "${liferayHome}/osgi/configs/com.liferay.portal.search.elasticsearch7.configuration.ElasticsearchConfiguration.config";
		var fileExists = FileUtil.exists("${fileLocation}");

		if ("${fileExists}" == "true") {
			var fileContent = FileUtil.read("${fileLocation}");
			var productionModeEnabled = RegexUtil.replace("${fileContent}", "productionModeEnabled=\"(.*)\"", "1");

			if ("${productionModeEnabled}" == "true") {
				return "true";
			}
			else {
				return "false";
			}
		}
		else {
			return "false";
		}
	}

	macro viewClusterStatus {
		AssertTextPresent(
			locator1 = "//pre",
			value1 = "${clusterStatus}");
	}

	@description = "Elasticsearch provides a Cluster Health API (http://localhost:${nodePort}/_cluster/health?pretty=true) to easily view the current status of the cluster."
	macro viewClusterStatusViaClusterHealthAPI {
		var portalHostname = PropsUtil.get("portal.hostname");

		Navigator.openSpecificURL(url = "http://${portalHostname}:${nodePort}/_cluster/health?level=indices&pretty");

		AssertTextEquals.assertPartialText(
			locator1 = "//body",
			value1 = "&quot;cluster_name&quot; : &quot;LiferayElasticsearchCluster&quot;");

		AssertTextEquals.assertPartialText(
			locator1 = "//body",
			value1 = "&quot;number_of_nodes&quot; : ${numberOfNodes}");

		AssertTextEquals.assertPartialText(
			locator1 = "//body",
			value1 = "&quot;number_of_data_nodes&quot; : ${numberOfNodes}");
	}

}