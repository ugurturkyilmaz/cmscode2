definition {

	macro _addAssetCategoryIds {
		Variables.assertDefined(parameterList = "${json},${assetCategoryIds}");

		var json = JSONUtil2._addJSONArray(
			json = "${json}",
			key = "assetCategoryIds");

		var json = JSONUtil2._addJSONArrayValues(
			json = "${json}",
			key = "assetCategoryIds",
			values = "${assetCategoryIds}");

		return "${json}";
	}

	macro _addAssetTagNames {
		Variables.assertDefined(parameterList = "${json},${assetTagNames}");

		var json = JSONUtil2._addJSONArray(
			json = "${json}",
			key = "assetTagNames");

		var json = JSONUtil2._addJSONArrayValues(
			json = "${json}",
			key = "assetTagNames",
			values = "${assetTagNames}");

		return "${json}";
	}

	macro _addAttributes {
		Variables.assertDefined(parameterList = "${json},${attributes}");

		var json = JSONUtil2._addJSONObject(
			json = "${json}",
			key = "attributes",
			value = "${attributes}");

		return "${json}";
	}

	macro _addGroupId {
		Variables.assertDefined(parameterList = "${groupName},${json}");

		if (!(isSet(site))) {
			var site = "true";
		}

		var groupId = JSONGroupAPI._getGroupIdByName(
			groupName = "${groupName}",
			site = "${site}");

		var json = JSONUtil2._addJSONObject(
			json = "${json}",
			key = "scopeGroupId",
			value = "${groupId}");

		return "${json}";
	}

	macro _addGroupPermissions {
		Variables.assertDefined(parameterList = "${json},${addGroupPermissions}");

		if (!(("${addGroupPermissions}" == "true") || ("${addGroupPermissions}" == "false"))) {
			fail("Invalid addGroupPermissions: '${addGroupPermissions}' specified. Allowed values are 'true' or 'false'.");
		}

		var json = JSONUtil2._addJSONObject(
			json = "${json}",
			key = "addGroupPermissions",
			value = "${addGroupPermissions}");

		return "${json}";
	}

	macro _addGuestPermissions {
		Variables.assertDefined(parameterList = "${json},${addGuestPermissions}");

		if (!(("${addGuestPermissions}" == "true") || ("${addGuestPermissions}" == "false"))) {
			fail("Invalid addGuestPermissions: '${addGuestPermissions}' specified. Allowed values are 'true' or 'false'.");
		}

		var json = JSONUtil2._addJSONObject(
			json = "${json}",
			key = "addGuestPermissions",
			value = "${addGuestPermissions}");

		return "${json}";
	}

	@summary = "See WorkflowConstants.java for available actions"
	macro _addWorkflowAction {
		Variables.assertDefined(parameterList = "${json},${workflowAction}");

		if ("${workflowAction}" == "DRAFT") {
			var workflowActionNumber = "2";
		}
		else if ("${workflowAction}" == "PUBLISH") {
			var workflowActionNumber = "1";
		}
		else {
			fail("Invalid workflowAction: '${workflowAction}' specified. Allowed values are 'DRAFT' or 'PUBLISH'.");
		}

		var json = JSONUtil2._addJSONObject(
			json = "${json}",
			key = "workflowAction",
			value = "${workflowActionNumber}");

		return "${json}";
	}

	macro setServiceContext {
		var serviceContext = "{}";

		if (isSet(assetCategoryIds)) {
			var serviceContext = JSONServiceContextUtil._addAssetCategoryIds(
				assetCategoryIds = "${assetCategoryIds}",
				json = "${serviceContext}");
		}

		if (isSet(assetTagNames)) {
			var serviceContext = JSONServiceContextUtil._addAssetTagNames(
				assetTagNames = "${assetTagNames}",
				json = "${serviceContext}");
		}

		if (isSet(addGroupPermissions)) {
			var serviceContext = JSONServiceContextUtil._addGroupPermissions(
				addGroupPermissions = "${addGroupPermissions}",
				json = "${serviceContext}");
		}

		if (isSet(addGuestPermissions)) {
			var serviceContext = JSONServiceContextUtil._addGuestPermissions(
				addGuestPermissions = "${addGuestPermissions}",
				json = "${serviceContext}");
		}

		if (isSet(attributes)) {
			var serviceContext = JSONServiceContextUtil._addAttributes(
				attributes = "${attributes}",
				json = "${serviceContext}");
		}

		if (isSet(groupName)) {
			var serviceContext = JSONServiceContextUtil._addGroupId(
				groupName = "${groupName}",
				json = "${serviceContext}",
				site = "${site}");
		}

		if (isSet(workflowAction)) {
			var serviceContext = JSONServiceContextUtil._addWorkflowAction(
				json = "${serviceContext}",
				workflowAction = "${workflowAction}");
		}

		return "${serviceContext}";
	}

}