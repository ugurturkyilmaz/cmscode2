definition {

	macro addComment {
		Click(locator1 = "BridgeDemos#SHOW_HIDE_COMMENTS_LINK");

		Type(
			key_text = "comments",
			locator1 = "TextArea#ANY",
			value1 = "${comments}");

		Click(locator1 = "BridgeDemos#SUBMIT_BUTTON");
	}

	macro autoPopulateCityState {
		Type(
			key_text = "Zip/Postal",
			locator1 = "TextInput#ANY",
			value1 = "${postalCode}");

		Click(
			key_text = "City",
			locator1 = "TextInput#ANY");

		AssertTextEquals(
			key_text = "City",
			locator1 = "TextInput#ANY",
			value1 = "${city}");

		if ("${applicantName}" == "Prime Faces") {
			AssertElementPresent(locator1 = "//div[label[contains(.,'State/Province')]]//select/option[@selected='selected' and contains(.,'${state}')]");
		}
		else {
			AssertTextEquals(
				key_text = "State/Province",
				locator1 = "BridgeDemos#STATE_PROVINCE_SELECTED",
				value1 = "${state}");
		}
	}

	macro bookFlight {
		Select(
			key_item = "title",
			locator1 = "BridgeDemos#FLIGHT_SELECT",
			value1 = "${title}");

		Type(
			key_field = "firstName",
			locator1 = "BridgeDemos#BOOKING_FIELD",
			value1 = "${firstName}");

		Type(
			key_field = "lastName",
			locator1 = "BridgeDemos#BOOKING_FIELD",
			value1 = "${lastName}");

		Type(
			key_field = "emailAddress",
			locator1 = "BridgeDemos#BOOKING_FIELD",
			value1 = "${emailAddress}");

		Type(
			key_field = "phoneNumber",
			locator1 = "BridgeDemos#BOOKING_FIELD",
			value1 = "${phoneNumber}");

		Type(
			key_field = "addressLine1",
			locator1 = "BridgeDemos#BOOKING_FIELD",
			value1 = "${addressLine1}");

		Type(
			key_field = "city",
			locator1 = "BridgeDemos#BOOKING_FIELD",
			value1 = "${city}");

		Select(
			key_item = "province",
			locator1 = "BridgeDemos#FLIGHT_SELECT",
			value1 = "${province}");

		Select(
			key_item = "paymentType",
			locator1 = "BridgeDemos#FLIGHT_SELECT",
			value1 = "${paymentType}");

		Type(
			key_field = "accountNumber",
			locator1 = "BridgeDemos#BOOKING_FIELD",
			value1 = "${accountNumber}");

		Type(
			key_field = "expirationMonth",
			locator1 = "BridgeDemos#BOOKING_FIELD",
			value1 = "${expirationMonth}");

		Click(
			key_buttonName = "Purchase",
			locator1 = "BridgeDemos#JSF_FLOWS_BUTTON");

		AssertTextEquals.assertPartialText(
			locator1 = "BridgeDemos#FIELD_ERROR_JSF_JSP",
			value1 = "Value is required");

		Type(
			key_field = "cvv",
			locator1 = "BridgeDemos#BOOKING_FIELD",
			value1 = "${cvv}");

		Click(
			key_buttonName = "Purchase",
			locator1 = "BridgeDemos#JSF_FLOWS_BUTTON");

		AssertTextEquals.assertPartialText(
			locator1 = "BridgeDemos#RESULT_MESSAGE",
			value1 = "Thank you John for your purchase.");
	}

	macro editDateFormat {
		BridgeDemos.gotoEdit();

		Type(
			locator1 = "BridgeDemos#DATE_PATTERN",
			value1 = "${dateFormat}");

		Click(locator1 = "BridgeDemos#SUBMIT_BUTTON");

		BridgeDemos.viewDateFormat(
			dateFormat = "${dateFormat}",
			displayDate = "${displayDate}");
	}

	macro editStartDate {
		Click(locator1 = "BridgeDemos#CUSTOMER_EDIT_BUTTON");

		Type(
			locator1 = "BridgeDemos#DATE_PATTERN",
			value1 = "${dateFormat}");

		Click(locator1 = "BridgeDemos#SUBMIT_BUTTON");

		BridgeDemos.viewDateFormat(
			dateFormat = "${dateFormat}",
			displayDate = "${displayDate}");
	}

	macro exportFile {
		for (var lastName : list "${lastName}") {
			AssertElementPresent(
				key_lastName = "${lastName}",
				locator1 = "BridgeDemos#EXPORT_LINK");

			Click(
				key_lastName = "${lastName}",
				locator1 = "BridgeDemos#EXPORT_LINK");

			DownloadTempFile();
		}
	}

	macro findFlight {
		Click(
			key_buttonName = "Enter Booking Flow",
			locator1 = "BridgeDemos#JSF_FLOWS_BUTTON");

		Select(
			key_item = "bookingType",
			locator1 = "BridgeDemos#FLIGHT_SELECT",
			value1 = "${bookingType}");

		Select(
			key_item = "departure",
			locator1 = "BridgeDemos#FLIGHT_SELECT",
			value1 = "${departure}");

		Select(
			key_item = "arrival",
			locator1 = "BridgeDemos#FLIGHT_SELECT",
			value1 = "${arrival}");

		Type.sendKeys(
			key_field = "departureDate",
			locator1 = "BridgeDemos#BOOKING_FIELD",
			value1 = "${date}");

		Click(
			key_buttonName = "Search Flights",
			locator1 = "BridgeDemos#JSF_FLOWS_BUTTON");

		AssertElementPresent(
			key_buttonName = "Add to Cart",
			locator1 = "BridgeDemos#JSF_FLOWS_BUTTON");

		Click(
			key_buttonName = "Add to Cart",
			locator1 = "BridgeDemos#JSF_FLOWS_BUTTON");

		AssertElementPresent(
			key_buttonName = "Remove",
			locator1 = "BridgeDemos#JSF_FLOWS_BUTTON");

		if ("${bookAdditionalTravel}" == "true") {
			Click(
				key_buttonName = "Book Additional Travel",
				locator1 = "BridgeDemos#JSF_FLOWS_BUTTON");
		}
		else {
			Click(
				key_buttonName = "Checkout",
				locator1 = "BridgeDemos#JSF_FLOWS_BUTTON");
		}
	}

	macro gotoEdit {
		Click(locator1 = "BridgeDemos#EDIT_LINK");
	}

	macro submit {
		Type(
			key_text = "First Name",
			locator1 = "TextInput#ANY",
			value1 = "${firstName}");

		Type(
			key_text = "Last Name",
			locator1 = "TextInput#ANY",
			value1 = "${lastName}");

		Type(
			key_text = "Email Address",
			locator1 = "TextInput#ANY",
			value1 = "${emailAddress}");

		Type(
			key_text = "Phone Number",
			locator1 = "TextInput#ANY",
			value1 = "${phoneNumber}");

		if ("${applicantName}" != "JSF JSP") {
			BridgeDemos.autoPopulateCityState(
				applicantName = "${applicantName}",
				city = "${city}",
				postalCode = "${postalCode}",
				state = "${state}");

			BridgeDemos.addComment(comments = "${comments}");

			AssertTextEquals.assertPartialText(
				locator1 = "BridgeDemos#CONFIRMATION_FORM",
				value1 = "${confirmation}");
		}
		else {
			Type(
				key_text = "City",
				locator1 = "TextInput#ANY",
				value1 = "${city}");

			Select(
				locator1 = "BridgeDemos#STATE_PROVINCE",
				value1 = "${state}");

			Type(
				key_text = "Zip/Postal",
				locator1 = "TextInput#ANY",
				value1 = "${postalCode}");
		}
	}

	macro submitSurvey {
		Click(
			key_buttonName = "Call Survey Flow",
			locator1 = "BridgeDemos#JSF_FLOWS_BUTTON");

		Type(
			key_num = "1",
			locator1 = "BridgeDemos#SURVEY_QUESTION",
			value1 = "${question1}");

		Type(
			key_num = "2",
			locator1 = "BridgeDemos#SURVEY_QUESTION",
			value1 = "${question2}");

		Click(
			key_buttonName = "Finish",
			locator1 = "BridgeDemos#JSF_FLOWS_BUTTON");

		AssertTextEquals(
			locator1 = "BridgeDemos#RESULT_MESSAGE",
			value1 = "Thank you John for participating in our survey.");

		Click(
			key_buttonName = "Return From Survey Flow",
			locator1 = "BridgeDemos#JSF_FLOWS_BUTTON");
	}

	macro uploadFile {
		if ("${applicantName}" == "JSF JSP") {
			Click(locator1 = "BridgeDemos#ADD_ATTACHMENT");
		}

		UploadCommonFile.uploadCommonFileHiddenNoMouseOver(
			locator1 = "TextInput#FILE",
			value1 = "${fileName}");

		if (("${applicantName}" == "Prime Faces") || ("${applicantName}" == "Rich JSP")) {
			Click(locator1 = "BridgeDemos#UPLOAD_BUTTON");
		}
		else {
			Click(locator1 = "BridgeDemos#SUBMIT_FILE_BUTTON");
		}

		AssertTextEquals(
			locator1 = "BridgeDemos#FILE_NAME_TABLE",
			value1 = "${fileName}");
	}

	macro validateField {
		Navigator.openWithAppendToBaseURL(urlAppend = "${urlAppend}");

		if ("${applicantName}" == "JSF JSP") {
			BridgeDemos.submit(
				applicantName = "JSF JSP",
				city = "Orlando",
				confirmation = "Thank you David",
				emailAddress = "no_need@just.pray",
				firstName = "David",
				lastName = "Samuel",
				phoneNumber = "1112223333",
				postalCode = "32801",
				state = "FL");
		}

		Type(
			key_text = "${fieldName}",
			locator1 = "TextInput#ANY",
			value1 = "${fieldValue}");

		Click(
			key_text = "City",
			locator1 = "TextInput#ANY");

		if ("${applicantName}" == "Butter Faces") {
			AssertElementPresent(
				key_fieldName = "${fieldName}",
				locator1 = "BridgeDemos#FIELD_ERROR_BUTTER_FACES_TOAST");
		}
		else if ("${applicantName}" == "JSF JSP") {
			Click(locator1 = "BridgeDemos#SUBMIT_BUTTON");

			AssertTextEquals.assertPartialText(
				key_fieldName = "${fieldName}",
				locator1 = "BridgeDemos#FIELD_ERROR_JSF_JSP",
				value1 = "${errorMessage}");
		}
		else if ("${applicantName}" == "Prime Faces") {
			Click(locator1 = "BridgeDemos#SUBMIT_BUTTON");

			BridgeDemos.viewFieldErrorMessage(
				applicantName = "${applicantName}",
				errorMessage = "${errorMessage}",
				fieldName = "${fieldNameText}");
		}
		else {
			BridgeDemos.viewFieldErrorMessage(
				applicantName = "${applicantName}",
				errorMessage = "${errorMessage}",
				fieldName = "${fieldNameText}");
		}
	}

	macro viewApplication {
		for (var key_text : list "First Name,Last Name,Email Address,Phone Number,Birthday,City,Zip/Postal") {
			AssertElementPresent(
				key_text = "${key_text}",
				locator1 = "TextInput#ANY");
		}

		AssertElementPresent(
			key_text = "State/Province",
			locator1 = "BridgeDemos#STATE_PROVINCE");

		if ("${applicantName}" != "JSF JSP") {
			AssertElementPresent(locator1 = "BridgeDemos#SHOW_HIDE_COMMENTS_LINK");
		}

		for (var key_libraryName : list "Mojarra,Liferay Faces Alloy,Liferay Faces Bridge Impl,Liferay Faces Bridge Ext") {
			AssertElementPresent(
				key_text = "${key_text}",
				locator1 = "TextInput#ANY");
		}
	}

	macro viewComment {
		if (IsElementNotPresent(key_tab = "comments", locator1 = "TextArea#ANY")) {
			Click(locator1 = "BridgeDemos#SHOW_HIDE_COMMENTS_LINK");
		}

		AssertTextEquals(
			key_text = "comments",
			locator1 = "TextArea#ANY",
			value1 = "${comments}");
	}

	macro viewDateFormat {
		var displayDate = DateUtil.getFormattedCurrentDate("${dateFormat}");

		// Ignored assetion because of the time zone issue: LRQA-61393

		//AssertTextEquals(
		//	key_text = "Birthday",
		//	locator1 = "TextInput#ANY",
		//	value1 = "${displayDate}");

	}

	macro viewFieldErrorMessage {
		if ("${applicantName}" == "Butter Faces") {
			AssertTextEquals.assertPartialText(
				key_fieldName = "${fieldName}",
				locator1 = "BridgeDemos#FIELD_ERROR_BUTTER_FACES",
				value1 = "${errorMessage}");
		}
		else if ("${applicantName}" == "JSF JSP") {
			AssertTextEquals.assertPartialText(
				key_fieldName = "${fieldName}",
				locator1 = "BridgeDemos#FIELD_ERROR_JSF_JSP",
				value1 = "${errorMessage}");
		}
		else {
			AssertTextEquals.assertPartialText(
				key_fieldName = "${fieldName}",
				locator1 = "BridgeDemos#FIELD_ERROR",
				value1 = "${errorMessage}");
		}
	}

	macro viewLibraries {
		for (var libraryName : list "${libraryName}") {
			AssertElementPresent(
				key_libraryName = "${libraryName}",
				locator1 = "BridgeDemos#LIBRARY_VERSION");
		}
	}

	macro viewNames {
		Click(
			key_customerId = "${customerId}",
			locator1 = "BridgeDemos#CUSTOMER_EDIT_BUTTON");

		AssertTextEquals(
			key_customerId = "${customerId}",
			locator1 = "BridgeDemos#CUSTOMER_FIRST_NAME",
			value1 = "${firstName}");

		AssertTextEquals(
			key_customerId = "${customerId}",
			locator1 = "BridgeDemos#CUSTOMER_LAST_NAME",
			value1 = "${lastName}");

		AssertTextEquals(
			key_item = "First Name",
			locator1 = "BridgeDemos#BOOKINGS_INPUT_FIELD",
			value1 = "${firstName}");

		AssertTextEquals(
			key_item = "Last Name",
			locator1 = "BridgeDemos#BOOKINGS_INPUT_FIELD",
			value1 = "${lastName}");

		if (isSet(lastNameEdit)) {
			Type(
				key_item = "Last Name",
				locator1 = "BridgeDemos#BOOKINGS_INPUT_FIELD",
				value1 = "${lastNameEdit}");
		}

		if (isSet(firstNameEdit)) {
			Type(
				key_item = "First Name",
				locator1 = "BridgeDemos#BOOKINGS_INPUT_FIELD",
				value1 = "${firstNameEdit}");
		}

		Click(locator1 = "BridgeDemos#SUBMIT_BUTTON");

		if (isSet(lastNameEdit)) {
			AssertTextEquals(
				key_customerId = "${customerId}",
				locator1 = "BridgeDemos#CUSTOMER_LAST_NAME",
				value1 = "${lastNameEdit}");

			Type(
				key_item = "Last Name",
				locator1 = "BridgeDemos#BOOKINGS_INPUT_FIELD",
				value1 = "${lastName}");
		}

		if (isSet(firstNameEdit)) {
			AssertTextEquals(
				key_customerId = "${customerId}",
				locator1 = "BridgeDemos#CUSTOMER_FIRST_NAME",
				value1 = "${firstNameEdit}");

			Type(
				key_item = "First Name",
				locator1 = "BridgeDemos#BOOKINGS_INPUT_FIELD",
				value1 = "${firstName}");
		}

		Click(locator1 = "BridgeDemos#SUBMIT_BUTTON");
	}

	macro viewStartDate {
		Click(
			key_customerId = "${customerId}",
			locator1 = "BridgeDemos#CUSTOMER_EDIT_BUTTON");

		// Ignored assetion because of the time zone issue: LRQA-61393

		//AssertTextEquals(
		//	key_item = "Start Date",
		//	locator1 = "BridgeDemos#BOOKINGS_INPUT_FIELD",
		//	value1 = "${startDate}");

		Type(
			key_item = "Start Date",
			locator1 = "BridgeDemos#BOOKINGS_INPUT_FIELD",
			value1 = "${startDateEdit}");

		Click(locator1 = "BridgeDemos#SUBMIT_BUTTON");

		AssertTextEquals(
			key_item = "Start Date",
			locator1 = "BridgeDemos#BOOKINGS_INPUT_FIELD",
			value1 = "${startDateEdit}");
	}

}