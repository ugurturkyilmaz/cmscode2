@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.component.names = "Look And Feel";
	property testray.main.component.name = "Look And Feel";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Add a site") {
			JSONGroup.addGroup(groupName = "Test Site Name");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "The user could define the look and feel of widgets."
	@priority = "5"
	test ConfigureLookAndFeelOfWidget {
		property portal.acceptance = "true";
		property testray.component.names = "Training";

		task ("Add a widget page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name");
		}

		task ("Add a Sign In widget to page") {
			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				widgetName = "Sign In");
		}

		task ("Define a custom text style in Sign In widget") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			Portlet.gotoPortletOptions(
				portletName = "Sign In",
				portletOption = "Look and Feel Configuration");

			IFrame.selectConfigurationFrame();

			Portlet.configureTextStylesViaLookAndFeelPG(
				font = "Verdana",
				size = "2em");

			Portlet.configureBorderStylesViaLookAndFeelPG(borderWidthAttributeList = "WidthTop-20");

			Refresh();
		}

		task ("View custom styles are shown") {
			AssertCssValue(
				locator1 = "Portlet#PORTLET_CONTENT",
				locator2 = "font-family",
				value1 = "Verdana");

			AssertCssValue(
				locator1 = "Portlet#PORTLET_CONTENT",
				locator2 = "font-size",
				value1 = "28px");

			AssertCssValue(
				locator1 = "Portlet#PORTLET_CONTENT",
				locator2 = "border-top-width",
				value1 = "1px");
		}

		task ("Select decorate as application decorators to Sign In without save") {
			Portlet.gotoPortletOptions(
				portletName = "Sign In",
				portletOption = "Look and Feel Configuration");

			IFrame.selectConfigurationFrame();

			Portlet.configureGeneralViaLookAndFeelPG(
				applicationDecorators = "Decorate",
				configureWithoutSave = "true");

			Button.clickCancel();
		}

		task ("View barebone is still shwon as application decorators") {
			Portlet.viewApplicationDecorator(decorator = "Borderless");
		}

		task ("View decorate and borderless are shown after selected in application decorators") {
			for (var decoratorName : list "Decorate,Barebone") {
				Portlet.gotoPortletOptions(
					portletName = "Sign In",
					portletOption = "Look and Feel Configuration");

				IFrame.selectConfigurationFrame();

				Portlet.configureGeneralViaLookAndFeelPG(applicationDecorators = "${decoratorName}");

				IFrame.closeFrame();

				Portlet.viewApplicationDecorator(decorator = "${decoratorName}");
			}
		}
	}

}