@component-name = "portal-social-networking"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Social Networking";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			User.firstLoginPG();

			BlogsEntry.tearDownCP();

			PagesAdmin.tearDownCP();
		}
	}

	@description = "It ensures that the user statistics are counted when social tracking is enabled."
	@priority = "5"
	@refactorneeded
	test CountUserStatisticsAfterEnablingSocialTracking {
		property test.name.skip.portal.instance = "SocialActivity#CountUserStatisticsAfterEnablingSocialTracking";

		ApplicationsMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "System Settings");

		SystemSettings.gotoConfiguration(
			configurationCategory = "User Activity",
			configurationName = "Social Activity",
			configurationScope = "Virtual Instance Scope");

		FormFields.viewCheckboxChecked(fieldName = "enableUserSocialActivityTracking");

		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Activities Page");

		Navigator.gotoPage(pageName = "Activities Page");

		Portlet.addPG(portletName = "Activities");

		Navigator.gotoPage(pageName = "Activities Page");

		AssertTextEquals.assertPartialText(
			key_portletName = "Activities",
			locator1 = "Portlet#BODY",
			value1 = "There are no recent activities.");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Document Title",
			groupName = "Guest",
			mimeType = "application/msword",
			sourceFileName = "Document_1.doc");

		Navigator.gotoPage(pageName = "Activities Page");

		AssertTextEquals(
			key_assetName = "DM Document Title",
			locator1 = "Activities#ACTIVITY_TITLE_ASSET_NAME",
			value1 = "DM Document Title");
	}

	@description = "It ensures that the user statistics are not counted when social tracking is disabled."
	@priority = "5"
	@refactorneeded
	test DisableSocialTracking {
		property test.name.skip.portal.instance = "SocialActivity#DisableSocialTracking";

		ApplicationsMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "System Settings");

		SystemSettings.gotoConfiguration(
			configurationCategory = "User Activity",
			configurationName = "Social Activity",
			configurationScope = "Virtual Instance Scope");

		FormFields.disableCheckbox(fieldName = "enable");

		PortletEntry.save();

		FormFields.viewCheckboxNotChecked(fieldName = "enable");

		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Activities Page");

		Navigator.gotoPage(pageName = "Activities Page");

		Portlet.addPG(portletName = "Activities");

		Navigator.gotoPage(pageName = "Activities Page");

		AssertTextEquals.assertPartialText(
			key_portletName = "Activities",
			locator1 = "Portlet#BODY",
			value1 = "There are no recent activities.");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Document Title",
			groupName = "Guest",
			mimeType = "application/msword",
			sourceFileName = "Document_1.doc");

		Navigator.gotoPage(pageName = "Activities Page");

		AssertTextEquals.assertPartialText(
			key_portletName = "Activities",
			locator1 = "Portlet#BODY",
			value1 = "There are no recent activities.");

		AssertElementNotPresent(
			key_assetName = "DM Document Title",
			locator1 = "Activities#ACTIVITY_TITLE_ASSET_NAME");
	}

	@description = "This is a use case for LPS-50602"
	@priority = "5"
	@refactorneeded
	test ViewDraftWikiPageViaActivities {
		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Activities Page");

		Navigator.gotoPage(pageName = "Activities Page");

		Portlet.addPG(portletName = "Activities");

		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Wiki Page");

		Navigator.gotoPage(pageName = "Wiki Page");

		Portlet.addPG(portletName = "Wiki");

		WikiNavigator.gotoAllPagesPG();

		WikiPage.addPG(
			wikiPageContent = "Wiki Page Content",
			wikiPageTitle = "Wiki Page Title");

		Navigator.gotoPage(pageName = "Activities Page");

		AssertTextEquals.assertPartialText(
			key_portletName = "Activities",
			locator1 = "Portlet#BODY",
			value1 = "Test wrote a new wiki page, Wiki Page Title.");

		Navigator.gotoPage(pageName = "Wiki Page");

		WikiNavigator.gotoAllPagesPG();

		WikiNavigator.gotoEntryEditViaPGTable(wikiPageTitle = "Wiki Page Title");

		WikiEntry.addPageContent(wikiPageContent = "Edit Wiki Page Content");

		SelectFrame(value1 = "relative=top");

		WikiEntry.saveAsDraft();

		Navigator.gotoPage(pageName = "Activities Page");

		AssertTextEquals.assertPartialText(
			key_portletName = "Activities",
			locator1 = "Portlet#BODY",
			value1 = "Test wrote a new wiki page, Wiki Page Title.");

		AssertTextNotEquals.assertNotPartialText(
			key_portletName = "Activities",
			locator1 = "Portlet#BODY",
			value1 = "Test updated a wiki page, Wiki Page Title.");
	}

}