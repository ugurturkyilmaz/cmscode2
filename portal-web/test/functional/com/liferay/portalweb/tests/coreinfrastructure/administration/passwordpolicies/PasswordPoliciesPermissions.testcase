@component-name = "portal-user-management-and-portal-configuration"
definition {

	property custom.properties = "jsonws.web.service.paths.excludes=";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Password Policies";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONUser.addUser(
			userEmailAddress = "userea3@liferay.com",
			userFirstName = "userfn3",
			userLastName = "userln3",
			userScreenName = "usersn3");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea3@liferay.com");

		JSONRole.addRegularRole(
			roleKey = "Password Policy Role Name",
			roleTitle = "Password Policy Role Name");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test");

			JSONUser.tearDownNonAdminUsers();

			Role.tearDownCP();

			PasswordPolicies.deleteCP(passwordPolicyName = "Password Policy Name");
		}
	}

	@description = "This test adds a regular role with Add Password Policy general permission. It asserts user assigned to this role can successfully add a password policy."
	@priority = "4"
	test UserCanAddAPolicy {
		Permissions.definePermissionViaJSONAPI(
			resourceAction = "ACCESS_IN_CONTROL_PANEL",
			resourceName = "com_liferay_password_policies_admin_web_portlet_PasswordPoliciesAdminPortlet",
			roleTitle = "Password Policy Role Name");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "ADD_PASSWORD_POLICY",
			resourceName = "90",
			roleTitle = "Password Policy Role Name");

		JSONRole.assignRoleToUser(
			roleTitle = "Password Policy Role Name",
			userEmailAddress = "userea3@liferay.com");

		User.logoutPG();

		User.loginUserPG(
			password = "test",
			userEmailAddress = "userea3@liferay.com");

		PasswordPolicies.openPasswordPoliciesAdmin();

		PasswordPolicies.addCP(passwordPolicyName = "Password Policy Name");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "test@liferay.com",
			userLoginFullName = "test test");

		PasswordPolicies.openPasswordPoliciesAdmin();

		PasswordPoliciesNavigator.gotoPolicy(passwordPolicyName = "Password Policy Name");

		PasswordPolicies.viewPasswordPolicyLockout(
			lockoutToggle = "disabled",
			maximumFailure = "0",
			passwordPolicyName = "Password Policy Name");
	}

	@description = "This test adds a regular role with Assign Members permission for Password Policy. It asserts user assigned to this role can successfully assign members to an existing password policy."
	@priority = "4"
	test UserCanAssignMembers {
		Permissions.definePermissionViaJSONAPI(
			resourceAction = "ADD_USER",
			resourceName = "90",
			roleTitle = "Password Policy Role Name");

		for (var resourceName : list "com_liferay_password_policies_admin_web_portlet_PasswordPoliciesAdminPortlet,com_liferay_users_admin_web_portlet_UsersAdminPortlet") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "ACCESS_IN_CONTROL_PANEL",
				resourceName = "${resourceName}",
				roleTitle = "Password Policy Role Name");
		}

		for (var resourceActionIndex : list "ASSIGN_MEMBERS,VIEW") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "${resourceActionIndex}",
				resourceName = "com.liferay.portal.kernel.model.PasswordPolicy",
				roleTitle = "Password Policy Role Name",
				roleType = "regular");
		}

		JSONRole.assignRoleToUser(
			roleTitle = "Password Policy Role Name",
			userEmailAddress = "userea3@liferay.com");

		PasswordPolicies.openPasswordPoliciesAdmin();

		PasswordPolicies.addCP(passwordPolicyName = "Password Policy Name");

		User.logoutPG();

		User.loginUserPG(
			password = "test",
			userEmailAddress = "userea3@liferay.com");

		User.openUsersAdmin();

		User.addCP(
			userEmailAddress = "newuser@liferay.com",
			userFirstName = "new",
			userLastName = "user",
			userScreenName = "newuser");

		PasswordPolicies.openPasswordPoliciesAdmin();

		PasswordPolicies.assignMembers(
			assigneeName = "new user",
			assigneeType = "Users",
			passwordPolicyName = "Password Policy Name");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "test@liferay.com",
			userLoginFullName = "test test");

		PasswordPolicies.openPasswordPoliciesAdmin();

		PasswordPolicies.viewAssignees(
			assigneeName = "new user",
			assigneeType = "Users",
			passwordPolicyName = "Password Policy Name");
	}

	@description = "This test adds a regular role with Permissions permission for Password Policy. It asserts user has the option to Define Permissions for an existing policy."
	@priority = "4"
	test UserCanDefinePermissions {
		Permissions.definePermissionViaJSONAPI(
			resourceAction = "ACCESS_IN_CONTROL_PANEL",
			resourceName = "com_liferay_password_policies_admin_web_portlet_PasswordPoliciesAdminPortlet",
			roleTitle = "Password Policy Role Name");

		for (var resourceActionIndex : list "PERMISSIONS,VIEW") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "${resourceActionIndex}",
				resourceName = "com.liferay.portal.kernel.model.PasswordPolicy",
				roleTitle = "Password Policy Role Name",
				roleType = "regular");
		}

		JSONRole.assignRoleToUser(
			roleTitle = "Password Policy Role Name",
			userEmailAddress = "userea3@liferay.com");

		PasswordPolicies.openPasswordPoliciesAdmin();

		PasswordPolicies.addCP(passwordPolicyName = "Password Policy Name");

		User.logoutPG();

		User.loginUserPG(
			password = "test",
			userEmailAddress = "userea3@liferay.com");

		PasswordPolicies.openPasswordPoliciesAdmin();

		LexiconEntry.gotoEntryMenuItem(
			menuItem = "Permissions",
			rowEntry = "Password Policy Name");

		IFrame.selectPermissionsFrame();

		Check(
			key_actionName = "DELETE",
			key_roleTitle = "password-policy-role-name",
			locator1 = "Permissions#PERMISSIONS_MODAL_CHECKBOX");

		Button.clickSave();

		AssertTextEquals.assertPartialText(
			locator1 = "Message#SUCCESS",
			value1 = "Your request completed successfully.");

		IFrame.closeFrame();

		PasswordPolicies.openPasswordPoliciesAdmin();

		PasswordPolicies.deleteCP(passwordPolicyName = "Password Policy Name");
	}

	@description = "This test adds a regular role with Delete permission for Password Policy. It asserts user assigned to this role can successfully delete an existing password policy."
	@priority = "4"
	test UserCanDeleteAPolicy {
		Permissions.definePermissionViaJSONAPI(
			resourceAction = "ACCESS_IN_CONTROL_PANEL",
			resourceName = "com_liferay_password_policies_admin_web_portlet_PasswordPoliciesAdminPortlet",
			roleTitle = "Password Policy Role Name");

		for (var resourceActionIndex : list "DELETE,VIEW") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "${resourceActionIndex}",
				resourceName = "com.liferay.portal.kernel.model.PasswordPolicy",
				roleTitle = "Password Policy Role Name",
				roleType = "regular");
		}

		JSONRole.assignRoleToUser(
			roleTitle = "Password Policy Role Name",
			userEmailAddress = "userea3@liferay.com");

		PasswordPolicies.openPasswordPoliciesAdmin();

		PasswordPolicies.addCP(passwordPolicyName = "Password Policy Name");

		User.logoutPG();

		User.loginUserPG(
			password = "test",
			userEmailAddress = "userea3@liferay.com");

		PasswordPolicies.openPasswordPoliciesAdmin();

		PasswordPolicies.deleteCP(passwordPolicyName = "Password Policy Name");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "test@liferay.com",
			userLoginFullName = "test test");

		PasswordPolicies.openPasswordPoliciesAdmin();

		LexiconEntry.viewNoEntry(rowEntry = "Password Policy Name");
	}

	@description = "This test adds a regular role with Update permission for Password Policy. It asserts user assigned to this role can successfully update an existing password policy."
	@priority = "4"
	test UserCanUpdateAPolicy {
		Permissions.definePermissionViaJSONAPI(
			resourceAction = "ACCESS_IN_CONTROL_PANEL",
			resourceName = "com_liferay_password_policies_admin_web_portlet_PasswordPoliciesAdminPortlet",
			roleTitle = "Password Policy Role Name");

		for (var resourceActionIndex : list "UPDATE,VIEW") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "${resourceActionIndex}",
				resourceName = "com.liferay.portal.kernel.model.PasswordPolicy",
				roleTitle = "Password Policy Role Name",
				roleType = "regular");
		}

		JSONRole.assignRoleToUser(
			roleTitle = "Password Policy Role Name",
			userEmailAddress = "userea3@liferay.com");

		PasswordPolicies.openPasswordPoliciesAdmin();

		PasswordPolicies.addCP(passwordPolicyName = "Password Policy Name");

		User.logoutPG();

		User.loginUserPG(
			password = "test",
			userEmailAddress = "userea3@liferay.com");

		PasswordPolicies.openPasswordPoliciesAdmin();

		PasswordPolicies.enableLockout(
			maximumFailure = "5",
			passwordPolicyName = "Password Policy Name",
			passwordPolicyPanel = "Lockout");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "test@liferay.com",
			userLoginFullName = "test test");

		PasswordPolicies.openPasswordPoliciesAdmin();

		PasswordPoliciesNavigator.gotoPolicy(passwordPolicyName = "Password Policy Name");

		PasswordPolicies.viewPasswordPolicyLockout(
			maximumFailure = "5",
			passwordPolicyName = "Password Policy Name");
	}

}