@component-name = "portal-user-management-and-portal-configuration"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Users and Organizations";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test");

			JSONUser.tearDownNonAdminUsers();

			Role.tearDownCP();

			PortalSettings.tearDownCP();
		}
	}

	@priority = "4"
	test AddUserRegRole {
		property custom.properties = "jsonws.web.service.paths.excludes=";
		property portal.acceptance = "true";

		Permissions.setUpRegRoleLoginUserCP(
			roleTitle = "Regrole Name",
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "VIEW_CONTROL_PANEL",
			resourceName = "90",
			roleTitle = "Regrole Name");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "ACCESS_IN_CONTROL_PANEL",
			resourceName = "com_liferay_users_admin_web_portlet_UsersAdminPortlet",
			roleTitle = "Regrole Name");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		UsersAndOrganizationsNavigator.gotoOrganizations();

		AssertTextEquals(
			locator1 = "Message#INFO",
			value1 = "Info:You do not belong to an organization and are not allowed to view other organizations.");

		AssertElementNotPresent(locator1 = "UsersAndOrganizations#ADD");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "ADD_USER",
			resourceName = "90",
			roleTitle = "Regrole Name");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		JSONUser.addUser(
			creatorEmailAddress = "userea@liferay.com",
			creatorPassword = "test",
			userEmailAddress = "userea1@liferay.com",
			userFirstName = "userfn1",
			userLastName = "userln1",
			userScreenName = "usersn1");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		User.viewCP(
			userEmailAddress = "userea1@liferay.com",
			userFirstName = "userfn1",
			userLastName = "userln1",
			userScreenName = "usersn1");

		Permissions.removePermissionViaAPI(
			resourceAction = "ADD_USER",
			resourceName = "90",
			roleTitle = "Regrole Name");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		AssertElementNotPresent(locator1 = "UsersAndOrganizations#ADD");

		UsersAndOrganizationsNavigator.gotoOrganizations();

		AssertTextEquals(
			locator1 = "Message#INFO",
			value1 = "Info:You do not belong to an organization and are not allowed to view other organizations.");

		AssertElementNotPresent(locator1 = "UsersAndOrganizations#ADD");
	}

	@description = "This test automates LPS-134264 and asserts that a user with Update User permissions cannot view the sites another user is a member of."
	@priority = "4"
	test SitesDoNotDisplayForUsersWithOnlyUpdateUserPermissions {
		task ("Given two users are created") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.addUser(
				userEmailAddress = "userea2@liferay.com",
				userFirstName = "userfn2",
				userLastName = "userln2",
				userScreenName = "usersn2");
		}

		task ("And given the first user is assigned to a new regular role with permissions to update and view users") {
			JSONRole.addRegularRole(roleTitle = "New Regular Role");

			JSONRole.assignRoleToUser(
				roleTitle = "New Regular Role",
				userEmailAddress = "userea@liferay.com");

			for (var resourceAction : list "ACCESS_IN_CONTROL_PANEL,VIEW") {
				Permissions.definePermissionViaJSONAPI(
					resourceAction = "${resourceAction}",
					resourceName = "com_liferay_users_admin_web_portlet_UsersAdminPortlet",
					roleTitle = "New Regular Role");
			}

			for (var resourceAction : list "UPDATE,VIEW") {
				Permissions.definePermissionViaJSONAPI(
					resourceAction = "${resourceAction}",
					resourceName = "com.liferay.portal.kernel.model.User",
					roleTitle = "New Regular Role");
			}
		}

		task ("When logged in as the first user with update permissions and viewing the sites of the second user") {
			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");

			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");

			User.openUsersAdmin();

			UserNavigator.gotoUser(userScreenName = "usersn2");

			UserNavigator.gotoMemberships();

			Click(
				locator1 = "UsersAndOrganizationsEditUser#SITES_SELECT_LINK",
				value1 = "SELECT");
		}

		task ("Then no sites should be displayed") {
			SelectFrame(
				key_title = "Select Site",
				locator1 = "IFrame#MODAL_ANY");

			AssertTextEquals(
				locator1 = "Message#EMPTY_INFO",
				value1 = "No sites were found.");
		}
	}

	@description = "This test automates LPS-141243 and asserts a user cannot edit their permissions"
	@priority = "4"
	test UserCannotEditOwnPermissions {
		task ("Given a new user is created with a role and permissions to view users and the Users Admin Portlet") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONRole.addRegularRole(roleTitle = "New Regular Role");

			JSONRole.assignRoleToUser(
				roleTitle = "New Regular Role",
				userEmailAddress = "userea@liferay.com");

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "VIEW",
				resourceName = "com.liferay.portal.kernel.model.User",
				roleTitle = "New Regular Role");

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "ACCESS_IN_CONTROL_PANEL",
				resourceName = "com_liferay_users_admin_web_portlet_UsersAdminPortlet",
				roleTitle = "New Regular Role");
		}

		task ("When accessing the menu of the user while signed in as that same user") {
			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");

			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");

			User.openUsersAdmin();

			Search.searchCP(searchTerm = "userfn userln");

			LexiconEntry.openEntryMenu(rowEntry = "userfn userln");
		}

		task ("Then the option to edit permissions should not be available") {
			AssertElementNotPresent(
				key_menuItem = "Permissions",
				locator1 = "MenuItem#ANY_MENU_ITEM");
		}
	}

}