@component-name = "portal-security"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Permissions";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			User.firstLoginPG();

			PagesAdmin.tearDownCP();
		}
	}

	@description = "This is a use case for LRQA-5029. Verify guest users cannot configure blogs."
	@priority = "5"
	test CannotConfigureBlogsPortletAsGuestPG {
		property app.server.types = "jboss,tcserver,tomcat,weblogic,websphere,wildfly";
		property database.types = "db2,hypersonic,mariadb,mysql,oracle,postgresql,sqlserver,sybase";
		property environment.acceptance = "true";
		property portal.acceptance = "true";

		task ("Add public page") {
			JSONLayout.addPublicLayout(
				groupName = "Guest",
				layoutName = "Blogs Page");
		}

		task ("Add new blog") {
			JSONLayout.addWidgetToPublicLayout(
				groupName = "Guest",
				layoutName = "Blogs Page",
				widgetName = "Blogs");
		}

		task ("Logout and go to blogs page") {
			User.logoutPG();

			Navigator.gotoPage(pageName = "Blogs Page");
		}

		task ("Assert no permission in configuration") {
			BlogsConfiguration.viewNoPermissionPG();
		}
	}

	@description = "This is a use case for LRQA-42712. Verify guest users cannot configure public pages."
	@priority = "4"
	test CannotConfigurePublicPageAsGuest {
		property custom.properties = "virtual.hosts.default.site.name=Guest";
		property test.assert.javascript.errors = "false";
		property test.assert.warning.exceptions = "true";

		var url1 = "http://localhost:8080/testxxx/?p_p_id=com_liferay_portlet_configuration_web_portlet_PortletConfigurationPortlet&p_p_lifecycle=0&p_p_state=maximized&_com_liferay_portlet_configuration_web_portlet_PortletConfigurationPortlet_mvcPath=%2Fedit_configuration.jsp&_com_liferay_portlet_configuration_web_portlet_PortletConfigurationPortlet_portletResource=com_liferay_users_admin_web_portlet_UsersAdminPortlet";
		var url2 = "http://localhost:8080/testxxx/?p_p_id=com_liferay_users_admin_web_portlet_UsersAdminPortlet&p_p_state=maximized";

		task ("Add public page") {
			JSONLayout.addPublicLayout(
				groupName = "Guest",
				layoutName = "testxxx");
		}

		task ("Logout, go to specific url and assert error message") {
			User.logoutPG();

			Navigator.openSpecificURL(url = "${url1}");

			Alert.viewErrorMessage(errorMessage = "You do not have the required permissions.");
		}

		task ("Go to specific url and assert error message") {
			Navigator.openSpecificURL(url = "${url2}");

			AssertTextEquals(
				locator1 = "Message#ERROR",
				value1 = "You do not have the roles required to access this portlet.");
		}
	}

}