@component-name = "portal-user-management-and-portal-configuration"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "User Groups";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONUser.tearDownNonAdminUsers();

			UserGroup.tearDownCP();
		}
	}

	@priority = "5"
	test AddMember {
		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUserGroup.addUserGroup(
			userGroupDescription = "UG UserGroup Name Description",
			userGroupName = "UG UserGroup Name");

		UserGroup.openUserGroupsAdmin();

		UserGroup.assignMemberCP(
			userGroupName = "UG UserGroup Name",
			userScreenName = "usersn");

		UserGroup.openUserGroupsAdmin();

		UserGroup.viewAssignMemberCP(
			userGroupName = "UG UserGroup Name",
			userScreenName = "usersn");
	}

	@priority = "3"
	test AddUserGroupNameDuplicate {
		UserGroup.openUserGroupsAdmin();

		UserGroup.addCP(userGroupName = "UG UserGroup Name");

		UserGroup.addCP(
			userGroupName = "UG UserGroup Name",
			userGroupNameVariation = "Duplicate");

		Alert.viewDuplicateErrorMessage();

		UserGroup.openUserGroupsAdmin();

		UserGroup.viewCP(userGroupName = "UG UserGroup Name");
	}

	@priority = "3"
	test AddUserGroupNameWithInvalidCharacters {
		UserGroup.openUserGroupsAdmin();

		UserGroup.addCP(
			userGroupName = "UG UserGroup Name Asterik*",
			userGroupNameVariation = "Invalid");

		UserGroup.openUserGroupsAdmin();

		UserGroup.addCP(
			userGroupName = "UG UserGroup Name Comma,",
			userGroupNameVariation = "Invalid");

		UserGroup.openUserGroupsAdmin();

		UserGroup.addCP(
			userGroupName = " ",
			userGroupNameVariation = "Null");

		UserGroup.openUserGroupsAdmin();

		UserGroup.addCP(
			userGroupName = "1",
			userGroupNameVariation = "Invalid");

		UserGroup.openUserGroupsAdmin();

		UserGroup.viewDefault();
	}

	@priority = "5"
	test AddUserGroups {
		property portal.acceptance = "true";

		for (var userGroupNumber : list "1,2,3") {
			JSONUserGroup.addUserGroup(
				userGroupDescription = "UG UserGroup${userGroupNumber} Name Description.",
				userGroupName = "UG UserGroup${userGroupNumber} Name");
		}

		UserGroup.openUserGroupsAdmin();

		UserGroup.viewCP(userGroupName = "UG UserGroup1 Name");

		UserGroup.viewCP(userGroupName = "UG UserGroup2 Name");

		UserGroup.viewCP(userGroupName = "UG UserGroup3 Name");
	}

	@priority = "5"
	test DeleteUserGroup {
		property portal.acceptance = "true";

		JSONUserGroup.addUserGroup(
			userGroupDescription = "UG UserGroup Description",
			userGroupName = "UG UserGroup Name");

		UserGroup.openUserGroupsAdmin();

		UserGroup.deleteCP(userGroupName = "UG UserGroup Name");

		UserGroup.viewDefault();
	}

	@priority = "4"
	test DeleteUserGroupWithMemberAssigned {
		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUserGroup.addUserGroup(
			userGroupDescription = "UG UserGroup Description",
			userGroupName = "UG UserGroup Name");

		JSONUser.addUserToUserGroup(
			userEmailAddress = "userea@liferay.com",
			userGroupName = "UG UserGroup Name");

		UserGroup.openUserGroupsAdmin();

		UserGroup.deleteCP(
			userGroupName = "UG UserGroup Name",
			withUser = "Yes");

		UserGroup.openUserGroupsAdmin();

		UserGroup.viewCP(userGroupName = "UG UserGroup Name");
	}

	@priority = "5"
	test EditUserGroup {
		property portal.acceptance = "true";

		JSONUserGroup.addUserGroup(
			userGroupDescription = "UG UserGroup Description",
			userGroupName = "UG UserGroup Name");

		UserGroup.openUserGroupsAdmin();

		UserGroup.editCP(
			userGroupName = "UG UserGroup Name",
			userGroupNameEdit = "UG UserGroup Name Edit");

		UserGroup.openUserGroupsAdmin();

		UserGroup.viewCP(userGroupName = "UG UserGroup Name Edit");
	}

	@priority = "5"
	test RemoveMember {
		property portal.acceptance = "true";

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUserGroup.addUserGroup(
			userGroupDescription = "UG UserGroup Description",
			userGroupName = "UG UserGroup Name");

		JSONUser.addUserToUserGroup(
			userEmailAddress = "userea@liferay.com",
			userGroupName = "UG UserGroup Name");

		UserGroup.openUserGroupsAdmin();

		UserGroup.removeMemberCP(
			userGroupName = "UG UserGroup Name",
			userScreenName = "usersn");

		UserGroup.openUserGroupsAdmin();

		UserGroup.viewRemoveMemberCP(
			userFirstName = "userfn",
			userGroupName = "UG UserGroup Name");
	}

	@priority = "5"
	test SearchCurrentMembersAssignedToUserGroup {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "CPUsergroups#SearchCurrentMembersAssignedToUserGroup";

		SearchAdministration.executeReindex();

		JSONUserGroup.addUserGroup(
			userGroupDescription = "UG UserGroup Description",
			userGroupName = "UG UserGroup Name");

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.addUserToUserGroup(
			userEmailAddress = "test@liferay.com",
			userGroupName = "UG UserGroup Name");

		JSONUser.addUserToUserGroup(
			userEmailAddress = "userea@liferay.com",
			userGroupName = "UG UserGroup Name");

		UserGroup.openUserGroupsAdmin();

		LexiconEntry.gotoEntry(rowEntry = "UG UserGroup Name");

		Search.searchCP(searchTerm = "usersn");

		AssertTextEquals(
			locator1 = "AuditReports#REPORTS_TABLE_RESOURCE_ID_1",
			value1 = "usersn");

		AssertNotVisible(locator1 = "UsersAndOrganizationsAssignOrganizationalRoles#USER_TABLE_SCREEN_NAME_2");
	}

	@priority = "5"
	test Smoke {
		property portal.acceptance = "true";

		UserGroup.openUserGroupsAdmin();

		UserGroup.viewPortletCP();

		UserGroup.viewDefault();

		UserGroup.addCP(userGroupName = "UG UserGroup Name");

		UserGroup.searchCP(userGroupName = "UG UserGroup Name");
	}

}