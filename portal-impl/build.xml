<?xml version="1.0"?>

<project basedir="." default="compile" name="portal-impl" xmlns:antelope="antlib:ise.antelope.tasks" xmlns:artifact="antlib:org.apache.maven.artifact.ant" xmlns:if="ant:if" xmlns:unless="ant:unless">
	<property name="test.properties" value="portal-test.properties" />

	<import file="../build-common-java.xml" />

	<property name="copy.jar" value="false" />
	<property name="deploy.dir" value="${app.server.shielded-container-lib.portal.dir}" />
	<property name="jar.file" value="${ant.project.name}" />
	<property name="manifest.bundle.name" value="Liferay Portal Impl" />
	<property name="manifest.bundle.symbolic.name" value="com.liferay.portal.impl;singleton:=true" />
	<property name="service.file" value="service.xml" />

	<target name="build-alloy-taglib-jar">
		<if>
			<not>
				<isset property="alloy.taglibs.dir" />
			</not>
			<then>
				<fail>
.

Please set the property "alloy.taglibs.dir" to point to a checked out version of
svn://svn.liferay.com/repos/public/alloy/trunk/sandbox/taglibs.
				</fail>
			</then>
		</if>

		<ant dir="${alloy.taglibs.dir}" inheritAll="false" target="clean" />
		<ant dir="${alloy.taglibs.dir}" inheritAll="false" target="start" />

		<copy
			preservelastmodified="true"
			todir="${project.dir}/lib/development"
		>
			<fileset
				file="${alloy.taglibs.dir}/alloy-taglib/alloy-taglib.jar"
			/>
		</copy>
	</target>

	<target name="build-db">
		<ant dir="../sql" target="build-db" />
	</target>

	<target name="build-iw">
		<java
			classname="com.liferay.portal.tools.InstanceWrapperBuilder"
			classpathref="project.classpath"
			fork="true"
			newenvironment="true"
		>
			<jvmarg value="-Dexternal-properties=com/liferay/portal/tools/dependencies/portal-tools.properties" />
			<arg value="src/com/liferay/portal/tools/instance_wrappers.xml" />
		</java>
	</target>

	<target name="build-json-java-jar">
		<mirrors-get
			dest="json-java.zip"
			src="https://github.com/douglascrockford/JSON-java/zipball/master"
		/>

		<tstamp>
			<format pattern="yyyyMMddkkmmssSSS" property="tstamp.value" />
		</tstamp>

		<unzip
			dest="${tstamp.value}/org/json"
			src="json-java.zip"
		>
			<patternset
				includes="**/*.java"
			/>
			<flattenmapper />
		</unzip>

		<delete file="json-java.zip" />

		<antcall target="compile">
			<param name="javac.destdir" value="${tstamp.value}" />
			<param name="javac.srcdir" value="${tstamp.value}" />
		</antcall>

		<zip
			basedir="${tstamp.value}"
			destfile="${project.dir}/lib/portal/json-java.jar.new"
		/>

		<delete dir="${tstamp.value}" />
	</target>

	<target name="build-lang">
		<antcall target="build-lang-cmd">
			<param name="lang.dir" value="src/content" />
			<param name="lang.file" value="Language" />
		</antcall>
	</target>

	<target name="build-lang-cmd">
		<path id="lang.builder.classpath">
			<fileset
				dir="${sdk.dir}/dependencies/com.liferay.lang.builder/lib"
				includes="*.jar"
			/>
		</path>

		<java
			classname="com.liferay.lang.builder.LangBuilder"
			classpathref="lang.builder.classpath"
			fork="true"
			newenvironment="true"
		>
			<jvmarg if:true="${jvm.debug}" value="${jpda.settings}" />
			<jvmarg value="-Dfile.encoding=UTF-8" />
			<jvmarg value="-Duser.country=US" />
			<jvmarg value="-Duser.language=en" />
			<arg value="build.current.branch=${build.current.branch}" />
			<arg value="git.working.branch.name=${git.working.branch.name}" />
			<arg value="lang.dir=${lang.dir}" />
			<arg value="lang.file=${lang.file}" />
			<arg value="lang.plugin=false" />
			<arg value="lang.translate=true" />
			<arg value="lang.translate.subscription.key=${microsoft.translator.subscription.key}" />
		</java>
	</target>

	<target name="build-lang-current-branch">
		<antcall target="build-lang-cmd">
			<param name="build.current.branch" value="true" />
			<param name="lang.dir" value="src/content" />
			<param name="lang.file" value="Language" />
		</antcall>
	</target>

	<target name="build-lib-versions">
		<delete dir="${project.dir}/tmp/license-reports" quiet="true" />

		<gradle-execute dir="${project.dir}/modules" task="generateLicenseReport">
			<arg value="-Dbuild.profile=portal" />
			<arg value="-Dlicense.report.enabled=true" />
			<arg value="-Dlicense.report.output.dir=${project.dir}/tmp/license-reports" />
			<arg value="-Dlicense.report.override.properties.file=${project.dir}/lib/license-override.properties" />
		</gradle-execute>

		<pathconvert pathsep="," property="modules.lib.versions.files">
			<fileset
				dir="${project.dir}/tmp/license-reports"
				includes="*.xml"
			/>
		</pathconvert>

		<java
			classname="com.liferay.portal.tools.XSLTBuilder"
			classpathref="project.classpath"
			fork="true"
			inputstring="${modules.lib.versions.files},${project.dir}/lib/versions.xml,${project.dir}/lib/versions-ext.xml"
			newenvironment="true"
		>
			<jvmarg value="-Dexternal-properties=com/liferay/portal/tools/dependencies/portal-tools.properties" />
			<arg value="${project.dir}/lib/versions.xsl" />
			<arg value="${project.dir}/lib/versions.html" />
		</java>

		<if>
			<available file="${project.dir}/lib/spdx.rdf" />
			<then>
				<java
					classname="com.liferay.portal.tools.SPDXBuilder"
					classpathref="project.classpath"
					fork="true"
					inputstring="${modules.lib.versions.files},${project.dir}/lib/versions.xml,${project.dir}/lib/versions-ext.xml"
					newenvironment="true"
				>
					<jvmarg if:true="${jvm.debug}" value="${jpda.settings}" />
					<jvmarg value="-Dexternal-properties=com/liferay/portal/tools/dependencies/portal-tools.properties" />
					<arg value="license.override.properties.file=${project.dir}/lib/license-override.properties" />
					<arg value="spdx.file=${project.dir}/lib/spdx.rdf" />
				</java>
			</then>
		</if>
	</target>

	<target name="build-service">
		<path id="service.builder.classpath">
			<fileset
				dir="${sdk.dir}/dependencies/com.liferay.portal.tools.service.builder/lib"
				includes="*.jar"
			/>
		</path>

		<java
			classname="com.liferay.portal.tools.service.builder.ServiceBuilder"
			classpathref="service.builder.classpath"
			fork="true"
			newenvironment="true"
			outputproperty="build-service.output"
		>
			<jvmarg if:true="${jvm.debug}" value="${jpda.settings}" />
			<jvmarg value="-Dfile.encoding=UTF-8" />
			<jvmarg value="-Xms512m" />
			<jvmarg value="-Xmx1024m" />
			<jvmarg value="-Xss2048k" />
			<jvmarg value="-XX:MaxPermSize=512m" />
			<arg value="-Dexternal-properties=com/liferay/portal/tools/dependencies/portal-tools.properties" />
			<arg value="-Dorg.apache.commons.logging.Log=org.apache.commons.logging.impl.Log4JLogger" />
			<arg value="service.api.dir=${basedir}/../portal-kernel/src" />
			<arg value="service.auto.import.default.references=true" />
			<arg value="service.auto.namespace.tables=false" />
			<arg value="service.bean.locator.util=com.liferay.portal.kernel.bean.PortalBeanLocatorUtil" />
			<arg value="service.build.number=1" />
			<arg value="service.build.number.increment=true" />
			<arg value="service.hbm.file=${basedir}/src/META-INF/portal-hbm.xml" />
			<arg value="service.impl.dir=${basedir}/src" />
			<arg value="service.incubation.features=${service.builder.incubation.features}" />
			<arg value="service.input.file=${service.file}" />
			<arg value="service.model.hints.configs=${basedir}/src/META-INF/portal-model-hints.xml" />
			<arg value="service.model.hints.file=${basedir}/src/META-INF/portal-model-hints.xml" />
			<arg value="service.osgi.module=false" />
			<arg value="service.plugin.name=" />
			<arg value="service.props.util=com.liferay.portal.util.PropsUtil" />
			<arg value="service.resources.dir=${basedir}/src" />
			<arg value="service.spring.file=${basedir}/src/META-INF/portal-spring.xml" />
			<arg value="service.spring.namespaces=beans" />
			<arg value="service.sql.dir=${basedir}/../sql" />
			<arg value="service.sql.file=portal-tables.sql" />
			<arg value="service.sql.indexes.file=indexes.sql" />
			<arg value="service.sql.sequences.file=sequences.sql" />
			<arg value="service.target.entity.name=${service.target.entity.name}" />
			<arg value="service.test.dir=${basedir}/../modules/test/persistence-test/src/testIntegration/java" />
		</java>

		<delete file="ServiceBuilder.temp" />

		<echo>${build-service.output}</echo>

		<if>
			<contains string="${build-service.output}" substring="Error" />
			<then>
				<fail>Service Builder generated exceptions.</fail>
			</then>
		</if>

		<ant dir="../portal-kernel" inheritAll="false" target="compile" />
	</target>

	<target name="build-service-counter">
		<antcall target="build-service">
			<param name="service.file" value="${basedir}/src/com/liferay/counter/service.xml" />
		</antcall>
	</target>

	<target name="build-service-portal">
		<antcall target="build-service">
			<param name="service.file" value="${basedir}/src/com/liferay/portal/service.xml" />
		</antcall>
	</target>

	<target name="build-service-portlet-announcements">
		<antcall target="build-service">
			<param name="service.file" value="${basedir}/src/com/liferay/portlet/announcements/service.xml" />
		</antcall>
	</target>

	<target name="build-service-portlet-asset">
		<antcall target="build-service">
			<param name="service.file" value="${basedir}/src/com/liferay/portlet/asset/service.xml" />
		</antcall>
	</target>

	<target name="build-service-portlet-documentlibrary">
		<antcall target="build-service">
			<param name="service.file" value="${basedir}/src/com/liferay/portlet/documentlibrary/service.xml" />
		</antcall>
	</target>

	<target name="build-service-portlet-expando">
		<antcall target="build-service">
			<param name="service.file" value="${basedir}/src/com/liferay/portlet/expando/service.xml" />
		</antcall>
	</target>

	<target name="build-service-portlet-exportimport">
		<antcall target="build-service">
			<param name="service.file" value="${basedir}/src/com/liferay/portlet/exportimport/service.xml" />
		</antcall>
	</target>

	<target name="build-service-portlet-ratings">
		<antcall target="build-service">
			<param name="service.file" value="${basedir}/src/com/liferay/portlet/ratings/service.xml" />
		</antcall>
	</target>

	<target name="build-service-portlet-social">
		<antcall target="build-service">
			<param name="service.file" value="${basedir}/src/com/liferay/portlet/social/service.xml" />
		</antcall>
	</target>

	<target name="build-service-portlets">
		<antcall target="build-service-portlet-announcements" />
		<antcall target="build-service-portlet-asset" />
		<antcall target="build-service-portlet-documentlibrary" />
		<antcall target="build-service-portlet-expando" />
		<antcall target="build-service-portlet-exportimport" />
		<antcall target="build-service-portlet-ratings" />
		<antcall target="build-service-portlet-social" />
	</target>

	<target name="build-services">
		<antcall target="build-service-counter" />
		<antcall target="build-service-portal" />
		<antcall target="build-service-portlets" />

		<gradle-execute dir="../modules" forcedcacheenabled="false" task="buildService">
			<arg value="--continue" />
			<arg unless:true="${build.services.baseline.enabled}" value="--exclude-task" />
			<arg unless:true="${build.services.baseline.enabled}" value="baseline" />
			<arg value="-DbuildService.skipReadOnly=${build.services.skip.read.only}" />
		</gradle-execute>
	</target>

	<target name="build-upgrade-table">
		<if>
			<not>
				<equals arg1="${upgrade.table.dir}" arg2="" />
			</not>
			<then>
				<antcall target="prepare-upgrade-table" />

				<path id="upgrade.table.builder.classpath">
					<fileset
						dir="${sdk.dir}/dependencies/com.liferay.portal.tools.upgrade.table.builder/lib"
						includes="*.jar"
					/>
				</path>

				<java
					classname="com.liferay.portal.tools.upgrade.table.builder.UpgradeTableBuilder"
					classpathref="upgrade.table.builder.classpath"
					fork="true"
					newenvironment="true"
				>
					<jvmarg if:true="${jvm.debug}" value="${jpda.settings}" />
					<arg value="upgrade.base.dir=." />
					<arg value="upgrade.osgi.module=false" />
					<arg value="upgrade.release.info.version=${release.info.version}" />
					<arg value="upgrade.table.dir=${upgrade.table.dir}" />
				</java>
			</then>
		</if>
	</target>

	<target depends="build-common-java.clean" name="clean">
		<if>
			<and>
				<equals arg1="${app.server.type}" arg2="tomcat" />
				<antelope:endswith string="${app.server.portal.dir}" with="/portal-web/docroot" />
			</and>
			<then>
				<delete dir="${app.server.classes.portal.dir}" />
			</then>
		</if>
	</target>

	<target depends="build-common-java.compile,init-compile" name="compile">
		<print-current-time />
	</target>

	<target name="compile-test">
		<ant dir="${project.dir}/portal-kernel" inheritAll="false" target="compile-test" />

		<antcall target="build-common.compile-test" />
	</target>

	<target name="compile-tools">
		<compile-dependencies />

		<javac
			classpathref="project.classpath"
			compiler="${javac.compiler}"
			debug="${javac.debug}"
			deprecation="${javac.deprecation}"
			destdir="${portal-impl.classes.dir}"
			includeAntRuntime="false"
			includes="**/portal/tools/**"
			nowarn="${javac.nowarn}"
			srcdir="src"
		/>
	</target>

	<target depends="build-common-java.deploy" name="deploy" unless="deploy.uptodate">
		<ant dir="../portal-kernel" inheritAll="false" target="deploy" />

		<deploy-properties />

		<if>
			<and>
				<equals arg1="${app.server.type}" arg2="tomcat" />
				<antelope:endswith string="${app.server.portal.dir}" with="/portal-web/docroot" />
			</and>
			<then>
				<delete failonerror="false" file="${deploy.dir}/${jar.file}" />

				<unjar
					dest="${app.server.classes.portal.dir}"
					src="portal-impl.jar"
				/>
			</then>
			<else>
				<copy
					file="${jar.file}.jar"
					preservelastmodified="true"
					todir="${deploy.dir}"
				/>

				<copy
					file="classes/log4j2.properties"
					preservelastmodified="true"
					todir="${app.server.classes.portal.dir}"
				/>
				<copy
					file="classes/logging.properties"
					preservelastmodified="true"
					todir="${app.server.classes.portal.dir}"
				/>
			</else>
		</if>
	</target>

	<target name="format-source">
		<antcall target="format-source-files">
			<param name="format.source.default.task" value="true" />
		</antcall>
	</target>

	<target name="format-source-all">
		<antcall target="format-source-files" />
	</target>

	<target name="format-source-bnd">
		<antcall target="format-source-files">
			<param name="source.file.extensions" value="bnd,gradle,json" />
		</antcall>
	</target>

	<target name="format-source-current-branch">
		<antcall target="format-source-files">
			<param name="format.current.branch" value="true" />
		</antcall>
	</target>

	<target name="format-source-current-branch-debug">
		<antcall target="format-source-current-branch">
			<param name="source.formatter.show.debug.information" value="true" />
		</antcall>
	</target>

	<target name="format-source-debug">
		<antcall target="format-source-files">
			<param name="source.formatter.show.debug.information" value="true" />
		</antcall>
	</target>

	<target name="format-source-deprecated-api">
		<antcall target="format-source-files">
			<param name="source.check.names" value="DeprecatedAPICheck" />
		</antcall>
	</target>

	<target name="format-source-files">
		<exec executable="git" failonerror="true" outputproperty="current.branch.name">
			<arg value="rev-parse" />
			<arg value="--abbrev-ref" />
			<arg value="HEAD" />
		</exec>

		<path id="source.formatter.classpath">
			<fileset
				dir="${sdk.dir}/dependencies/com.liferay.source.formatter/lib"
				includes="*.jar"
			/>
			<path refid="project.classpath" />
		</path>

		<if>
			<equals arg1="${current.branch.name}" arg2="${git.working.branch.name}" />
			<then>
				<if>
					<isset property="format.current.branch" />
					<then>
						<property name="source.formatter.message" value="The current branch is the same as the working branch (${git.working.branch.name}).${line.separator}Not executing Source Formatter task." />
						<property name="source.formatter.skip" value="true" />
					</then>
				</if>
			</then>
			<else>
				<java
					classname="com.liferay.portal.tools.GitUtil"
					classpathref="source.formatter.classpath"
					dir="${project.dir}"
					fork="true"
					newenvironment="true"
					outputProperty="baseline.current.branch.file.names"
					resultproperty="baseline.current.branch.result"
				>
					<arg value="git.type=current-branch" />
					<arg value="git.working.branch.name=${git.working.branch.name}" />
				</java>

				<if>
					<and>
						<not>
							<equals arg1="${baseline.current.branch.file.names}" arg2="" />
						</not>
						<equals arg1="${baseline.current.branch.result}" arg2="0" />
					</and>
					<then>
						<if>
							<isset property="format.source.default.task" />
							<then>
								<property name="format.current.branch" value="true" />
								<property name="source.formatter.message" value="Running SourceFormatter on added/modified files in the current branch (${current.branch.name}) only. Please run the following command to run SourceFormatter on all files:${line.separator}${line.separator}ant format-source-all" />
								<property name="validate.commit.messages" value="true" />
							</then>
						</if>

						<if>
							<or>
								<matches pattern="modules/test/poshi" string="${baseline.current.branch.file.names}" />
								<not>
									<matches pattern="\.(js|json|jsp|jspf|scss|ts|tsx)(${line.separator}|$)" string="${baseline.current.branch.file.names}" />
								</not>
							</or>
							<then>
								<property name="skip.node.task" value="true" />
							</then>
						</if>
					</then>
					<else>
						<if>
							<isset property="format.source.default.task" />
							<then>
								<property name="source.formatter.message" value="There are no modified files on the current branch (${current.branch.name}).${line.separator}Executing Source Formatter task on all files." />
							</then>
							<else>
								<if>
									<isset property="format.current.branch" />
									<then>
										<property name="source.formatter.message" value="There are no modified files on the current branch (${current.branch.name}).${line.separator}Not executing Source Formatter task." />
										<property name="source.formatter.skip" value="true" />
									</then>
								</if>
							</else>
						</if>
					</else>
				</if>
			</else>
		</if>

		<if>
			<isset property="source.formatter.message" />
			<then>
				<echo></echo>
				<echo>${source.formatter.message}</echo>
				<echo></echo>
			</then>
		</if>

		<if>
			<not>
				<isset property="source.formatter.skip" />
			</not>
			<then>
				<if>
					<not>
						<isset property="source.formatter.dir" />
					</not>
					<then>
						<property name="source.formatter.dir" value="${project.dir}" />
					</then>
				</if>

				<java
					classname="com.liferay.source.formatter.SourceFormatter"
					classpathref="source.formatter.classpath"
					dir="${source.formatter.dir}"
					failonerror="true"
					fork="true"
					newenvironment="true"
				>
					<jvmarg if:true="${jvm.debug}" value="${jpda.settings}" />
					<jvmarg value="-Xmx2048m" />
					<jvmarg value="-Xss2048k" />
					<jvmarg value="-Dfile.encoding=UTF-8" />
					<jvmarg value="-Dsource.formatter.check.registry.in.test.classes=${source.formatter.check.registry.in.test.classes}" />
					<jvmarg value="-Dsource.formatter.excludes=${source.formatter.excludes}" />
					<arg value="commit.count=${source.formatter.commit.count}" />
					<arg value="format.current.branch=${format.current.branch}" />
					<arg value="format.latest.author=${format.latest.author}" />
					<arg value="format.local.changes=${format.local.changes}" />
					<arg value="git.working.branch.name=${git.working.branch.name}" />
					<arg value="include.subrepositories=${source.formatter.include.subrepositories}" />
					<arg value="max.line.length=${source.formatter.max.line.length}" />
					<arg value="processor.thread.count=${source.formatter.processor.thread.count}" />
					<arg value="show.debug.information=${source.formatter.show.debug.information}" />
					<arg value="source.auto.fix=${source.auto.fix}" />
					<arg value="source.base.dir=${source.base.dir}" />
					<arg value="source.check.category.names=${source.check.category.names}" />
					<arg value="source.check.names=${source.check.names}" />
					<arg value="source.fail.on.auto.fix=${source.fail.on.auto.fix}" />
					<arg value="source.fail.on.has.warning=${source.fail.on.has.warning}" />
					<arg value="source.file.extensions=${source.file.extensions}" />
					<arg value="source.files=${source.files}" />
					<arg value="source.formatter.properties=${source.formatter.properties}" />
					<arg value="source.print.errors=${source.print.errors}" />
					<arg value="validate.commit.messages=${validate.commit.messages}" />
				</java>

				<delete file="ServiceBuilder.temp" />

				<if>
					<and>
						<not>
							<or>
								<isset property="skip.node.task" />
								<isset property="source.file.extensions" />
								<isset property="source.files" />
							</or>
						</not>
						<resourcecount count="0" when="greater">
							<fileset
								dir="${project.dir}/modules"
								excludes="**/.gradle/,**/bin/,**/build/,**/classes/,**/node_modules/,**/tmp/"
								includes="**/yarn.lock"
							/>
						</resourcecount>
					</and>
					<then>
						<if>
							<and>
								<isset property="source.auto.fix" />
								<isfalse value="${source.auto.fix}" />
							</and>
							<then>
								<gradle-execute dir="${project.dir}/modules" task=":portalYarnCheckFormat">
									<env key="LIFERAY_NPM_SCRIPTS_WORKING_BRANCH_NAME" value="${git.working.branch.name}" />
								</gradle-execute>
							</then>
							<else>
								<gradle-execute dir="${project.dir}/modules" task=":portalYarnFormat">
									<env key="LIFERAY_NPM_SCRIPTS_WORKING_BRANCH_NAME" value="${git.working.branch.name}" />
								</gradle-execute>
							</else>
						</if>
					</then>
				</if>
			</then>
		</if>
	</target>

	<target name="format-source-latest-author">
		<antcall target="format-source-files">
			<param name="format.latest.author" value="true" />
		</antcall>
	</target>

	<target name="format-source-latest-author-debug">
		<antcall target="format-source-latest-author">
			<param name="source.formatter.show.debug.information" value="true" />
		</antcall>
	</target>

	<target name="format-source-local-changes">
		<antcall target="format-source-files">
			<param name="format.local.changes" value="true" />
		</antcall>
	</target>

	<target name="format-source-local-changes-debug">
		<antcall target="format-source-local-changes">
			<param name="source.formatter.show.debug.information" value="true" />
		</antcall>
	</target>

	<target name="format-source-missing-override">
		<antcall target="format-source-files">
			<param name="source.check.names" value="JavaMissingOverrideCheck" />
		</antcall>
	</target>

	<target name="format-tld">
		<path id="tld.formatter.classpath">
			<fileset
				dir="${sdk.dir}/dependencies/com.liferay.tld.formatter/lib"
				includes="*.jar"
			/>
		</path>

		<java
			classname="com.liferay.tld.formatter.TLDFormatter"
			classpathref="tld.formatter.classpath"
			dir="${project.dir}"
			fork="true"
			newenvironment="true"
		>
			<arg value="tld.base.dir=./util-taglib/src/META-INF/" />
			<arg value="tld.plugin=false" />
		</java>

		<delete file="ServiceBuilder.temp" />
	</target>

	<target depends="build-common-java.init-compile" name="init-compile">
		<copy
			preservelastmodified="true"
			todir="${portal-impl.classes.dir}/com/liferay/portal/definitions"
		>
			<fileset
				dir="${project.dir}/definitions"
			/>
		</copy>

		<copy
			preservelastmodified="true"
			todir="${portal-impl.classes.dir}/com/liferay/portal/deploy/dependencies"
		>
			<fileset
				dir="${project.dir}/classes"
				includes="*.properties"
			/>
			<fileset
				dir="${project.dir}/portal-web/docroot/WEB-INF/tld"
				includes="*.tld"
			/>
		</copy>

		<copy
			preservelastmodified="true"
			todir="${portal-impl.classes.dir}/com/liferay/portal/tools/sql/dependencies"
		>
			<fileset
				dir="${project.dir}/sql"
				includes="portal-data-common.sql,portal-data-counter.sql,portal-tables.sql,indexes.properties,indexes.sql,sequences.sql,update-*.sql"
			/>
		</copy>

		<copy
			file="${project.dir}/classes/log4j2.properties"
			preservelastmodified="true"
			todir="${portal-impl.classes.dir}"
		/>
		<copy
			file="${project.dir}/classes/logging.properties"
			preservelastmodified="true"
			todir="${portal-impl.classes.dir}"
		/>

		<copy
			preservelastmodified="true"
			todir="${portal-impl.classes.dir}"
		>
			<fileset
				dir="src"
				excludes="**/*.java,**/META-INF/javadocs-all*.xml"
			/>
		</copy>
	</target>

	<target depends="build-common-java.init-jar" name="init-jar">
		<ant dir="../util-bridges" inheritAll="false" target="jar" />
		<ant dir="../util-java" inheritAll="false" target="jar" />
		<ant dir="../util-slf4j" inheritAll="false" target="jar" />
		<ant dir="../util-taglib" inheritAll="false" target="jar" />

		<property name="portal.deploy.dependencies.dir" value="${portal-impl.classes.dir}/com/liferay/portal/deploy/dependencies" />

		<for list="1,2,3,4,5,6,7,8,9" param="index">
			<sequential>
				<if>
					<available file="${portal.deploy.dependencies.dir}/plugins@{index}" />
					<then>
						<fileset
							dir="${portal.deploy.dependencies.dir}/plugins@{index}"
							id="plugins@{index}.wars"
						>
							<include name="*.war" />
						</fileset>

						<pathconvert pathsep="," property="plugins@{index}.wars.list" refid="plugins@{index}.wars">
							<flattenmapper />
						</pathconvert>

						<if>
							<not>
								<uptodate
									targetfile="${jar.file}.jar"
								>
									<srcfiles dir="${portal.deploy.dependencies.dir}/plugins@{index}" includes="**/*.*" />
								</uptodate>
							</not>
							<then>
								<echo file="${portal.deploy.dependencies.dir}/plugins@{index}/wars.txt">${plugins@{index}.wars.list}</echo>
							</then>
						</if>
					</then>
				</if>
			</sequential>
		</for>
	</target>

	<target name="prepare-upgrade-table">
		<for param="zip.file">
			<path>
				<fileset
					dir="${upgrade.table.dir}"
					includes="*.zip"
				/>
			</path>
			<sequential>
				<antelope:stringutil property="zip.version.beginindex" string="@{zip.file}">
					<indexof fromindex="0" string="src-" />
				</antelope:stringutil>

				<math
					datatype="int"
					operand1="${zip.version.beginindex}"
					operand2="4"
					operation="+"
					result="zip.version.beginindex"
				/>

				<antelope:stringutil property="zip.version.endindex" string="@{zip.file}">
					<indexof fromindex="0" string=".zip" />
				</antelope:stringutil>

				<antelope:stringutil property="zip.version" string="@{zip.file}">
					<substring beginindex="${zip.version.beginindex}" endindex="${zip.version.endindex}" />
				</antelope:stringutil>

				<if>
					<or>
						<not>
							<uptodate
								srcfile="@{zip.file}"
								targetfile="${upgrade.table.dir}/${zip.version}"
							/>
						</not>
						<not>
							<available file="${upgrade.table.dir}/${zip.version}/indexes.sql" />
						</not>
					</or>
					<then>
						<mkdir dir="${upgrade.table.dir}/${zip.version}" />

						<unzip
							dest="${upgrade.table.dir}/${zip.version}"
							src="@{zip.file}"
						>
							<patternset>
								<include name="**/*ModelImpl.java" />
								<include name="**/sql/indexes.sql" />
							</patternset>
							<mapper
								type="flatten"
							/>
						</unzip>
					</then>
				</if>
			</sequential>
		</for>
	</target>

	<target name="rebuild-hypersonic">
		<ant dir="../sql" target="rebuild-hypersonic" />
	</target>

	<target name="sync-plugins-git-to-svn">
		<java
			classname="com.liferay.portal.tools.PluginsGitSvnSyncer"
			classpathref="project.classpath"
			fork="true"
			newenvironment="true"
		>
			<jvmarg value="-Dgit.plugins.dir=L:/projects/github/liferay-plugins" />
			<jvmarg value="-Dsvn.plugins.dir=L:/projects/liferay.public/plugins/trunk" />
			<jvmarg value="-Dsync.to=svn" />
		</java>
	</target>

	<target name="sync-plugins-svn-to-git">
		<java
			classname="com.liferay.portal.tools.PluginsGitSvnSyncer"
			classpathref="project.classpath"
			fork="true"
			newenvironment="true"
		>
			<jvmarg value="-Dgit.plugins.dir=L:/projects/github/liferay-plugins" />
			<jvmarg value="-Dsvn.plugins.dir=L:/projects/liferay.public/plugins/trunk" />
			<jvmarg value="-Dsync.to=git" />
		</java>
	</target>

	<target name="upgrade-db">
		<java
			classname="com.liferay.portal.tools.DBUpgrader"
			classpathref="project.classpath"
			fork="true"
			maxmemory="1024m"
			newenvironment="true"
		>
			<jvmarg value="-Dfile.encoding=UTF-8" />
			<jvmarg value="-Duser.country=US" />
			<jvmarg value="-Duser.language=en" />
			<jvmarg value="-Duser.timezone=GMT" />
		</java>
	</target>
</project>