diff --git a/org/apache/http/conn/ssl/AbstractVerifier.java b/org/apache/http/conn/ssl/AbstractVerifier.java
index d22bbe5..3697100 100644
--- a/org/apache/http/conn/ssl/AbstractVerifier.java
+++ b/org/apache/http/conn/ssl/AbstractVerifier.java
@@ -36,6 +36,7 @@ import java.io.InputStream;
 import java.security.cert.Certificate;
 import java.security.cert.CertificateParsingException;
 import java.security.cert.X509Certificate;
+import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collection;
 import java.util.Iterator;
@@ -45,7 +46,14 @@ import java.util.Locale;
 import java.util.StringTokenizer;
 import java.util.logging.Logger;
 import java.util.logging.Level;
-
+import java.util.NoSuchElementException;
+
+import javax.naming.InvalidNameException;
+import javax.naming.NamingException;
+import javax.naming.directory.Attribute;
+import javax.naming.directory.Attributes;
+import javax.naming.ldap.LdapName;
+import javax.naming.ldap.Rdn;
 import javax.net.ssl.SSLException;
 import javax.net.ssl.SSLSession;
 import javax.net.ssl.SSLSocket;
@@ -237,46 +245,42 @@ public abstract class AbstractVerifier implements X509HostnameVerifier {
         return Arrays.binarySearch(BAD_COUNTRY_2LDS, parts[1]) < 0;
     }
 
-    public static String[] getCNs(X509Certificate cert) {
-        LinkedList<String> cnList = new LinkedList<String>();
-        /*
-          Sebastian Hauer's original StrictSSLProtocolSocketFactory used
-          getName() and had the following comment:
-
-                Parses a X.500 distinguished name for the value of the
-                "Common Name" field.  This is done a bit sloppy right
-                 now and should probably be done a bit more according to
-                <code>RFC 2253</code>.
-
-           I've noticed that toString() seems to do a better job than
-           getName() on these X500Principal objects, so I'm hoping that
-           addresses Sebastian's concern.
-
-           For example, getName() gives me this:
-           1.2.840.113549.1.9.1=#16166a756c6975736461766965734063756362632e636f6d
-
-           whereas toString() gives me this:
-           EMAILADDRESS=juliusdavies@cucbc.com
-
-           Looks like toString() even works with non-ascii domain names!
-           I tested it with "&#x82b1;&#x5b50;.co.jp" and it worked fine.
-        */
-        String subjectPrincipal = cert.getSubjectX500Principal().toString();
-        StringTokenizer st = new StringTokenizer(subjectPrincipal, ",");
-        while(st.hasMoreTokens()) {
-            String tok = st.nextToken();
-            int x = tok.indexOf("CN=");
-            if(x >= 0) {
-                cnList.add(tok.substring(x + 3));
-            }
+    public static String[] getCNs(final X509Certificate cert) {
+        final String subjectPrincipal = cert.getSubjectX500Principal().toString();
+        try {
+            return extractCNs(subjectPrincipal);
+        } catch (SSLException ex) {
+            return null;
         }
-        if(!cnList.isEmpty()) {
-            String[] cns = new String[cnList.size()];
-            cnList.toArray(cns);
-            return cns;
-        } else {
+    }
+
+    static String[] extractCNs(final String subjectPrincipal) throws SSLException {
+        if (subjectPrincipal == null) {
             return null;
         }
+        final List<String> cns = new ArrayList<String>();
+        try {
+            final LdapName subjectDN = new LdapName(subjectPrincipal);
+            final List<Rdn> rdns = subjectDN.getRdns();
+            for (int i = rdns.size() - 1; i >= 0; i--) {
+                final Rdn rds = rdns.get(i);
+                final Attributes attributes = rds.toAttributes();
+                final Attribute cn = attributes.get("cn");
+                if (cn != null) {
+                    try {
+                        final Object value = cn.get();
+                        if (value != null) {
+                            cns.add(value.toString());
+                        }
+                    } catch (NoSuchElementException ignore) {
+                    } catch (NamingException ignore) {
+                    }
+                }
+            }
+        } catch (InvalidNameException e) {
+            throw new SSLException(subjectPrincipal + " is not a valid X500 distinguished name");
+        }
+        return cns.isEmpty() ? null : cns.toArray(new String[ cns.size() ]);
     }
 
     /**
@@ -364,3 +368,5 @@ public abstract class AbstractVerifier implements X509HostnameVerifier {
     }
 
 }
+
+/* @generated */
\ No newline at end of file
diff --git a/org/apache/http/conn/ssl/SSLSocketFactory.java b/org/apache/http/conn/ssl/SSLSocketFactory.java
index cf2a777..b437a93 100644
--- a/org/apache/http/conn/ssl/SSLSocketFactory.java
+++ b/org/apache/http/conn/ssl/SSLSocketFactory.java
@@ -325,7 +325,7 @@ public class SSLSocketFactory implements LayeredSchemeSocketFactory, LayeredSock
             final SSLContext sslContext, final X509HostnameVerifier hostnameVerifier) {
         super();
         this.socketfactory = sslContext.getSocketFactory();
-        this.hostnameVerifier = hostnameVerifier;
+        this.hostnameVerifier = hostnameVerifier != null ? hostnameVerifier : BROWSER_COMPATIBLE_HOSTNAME_VERIFIER;
         this.nameResolver = null;
     }

@@ -392,15 +392,13 @@ public class SSLSocketFactory implements LayeredSchemeSocketFactory, LayeredSock
         } else {
             sslsock = (SSLSocket) this.socketfactory.createSocket(sock, hostname, port, true);
         }
-        if (this.hostnameVerifier != null) {
-            try {
-                this.hostnameVerifier.verify(hostname, sslsock);
-                // verifyHostName() didn't blowup - good!
-            } catch (IOException iox) {
-                // close the socket before re-throwing the exception
-                try { sslsock.close(); } catch (Exception x) { /*ignore*/ }
-                throw iox;
-            }
+        try {
+            this.hostnameVerifier.verify(hostname, sslsock);
+            // verifyHostName() didn't blowup - good!
+        } catch (IOException iox) {
+            // close the socket before re-throwing the exception
+            try { sslsock.close(); } catch (Exception x) { /*ignore*/ }
+            throw iox;
         }
         return sslsock;
     }
@@ -449,9 +447,7 @@ public class SSLSocketFactory implements LayeredSchemeSocketFactory, LayeredSock
               port,
               autoClose
         );
-        if (this.hostnameVerifier != null) {
-            this.hostnameVerifier.verify(host, sslSocket);
-        }
+        this.hostnameVerifier.verify(host, sslSocket);
         // verifyHostName() didn't blowup - good!
         return sslSocket;
     }
@@ -461,7 +457,7 @@ public class SSLSocketFactory implements LayeredSchemeSocketFactory, LayeredSock
         if ( hostnameVerifier == null ) {
             throw new IllegalArgumentException("Hostname verifier may not be null");
         }
-        this.hostnameVerifier = hostnameVerifier;
+        this.hostnameVerifier = hostnameVerifier != null ? hostnameVerifier : BROWSER_COMPATIBLE_HOSTNAME_VERIFIER;
     }

     public X509HostnameVerifier getHostnameVerifier() {
@@ -507,3 +503,5 @@ public class SSLSocketFactory implements LayeredSchemeSocketFactory, LayeredSock
     }

 }
+
+/* @generated */
\ No newline at end of file