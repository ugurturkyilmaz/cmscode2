diff --git a/freemarker/core/FMParser.java b/freemarker/core/FMParser.java
index 077efb69d378..81cb29b5d4fd 100644
--- a/freemarker/core/FMParser.java
+++ b/freemarker/core/FMParser.java
@@ -4247,7 +4247,7 @@ mixedContentNesting--;
       jj_la1[103] = jj_gen;
       ;
     }
-{if ("" != null) return tp != null ? tp : new TextBlock(CollectionUtils.EMPTY_CHAR_ARRAY, false);}
+{if ("" != null) return tp != null ? tp : new TextBlock("", false);}
     throw new Error("Missing return statement in function");
   }
 
@@ -6172,3 +6172,4 @@ TemplateElement root = children.asSingleElement();
   }
 
 }
+/* @generated */
\ No newline at end of file
diff --git a/freemarker/core/TemplateElementArrayBuilder.java b/freemarker/core/TemplateElementArrayBuilder.java
index fff82109a503..90783936e371 100644
--- a/freemarker/core/TemplateElementArrayBuilder.java
+++ b/freemarker/core/TemplateElementArrayBuilder.java
@@ -18,8 +18,6 @@
  */
 package freemarker.core;
 
-import freemarker.template.utility.CollectionUtils;
-
 /**
  * Holds an buffer (array) of {@link TemplateElement}-s with the count of the utilized items in it. The un-utilized tail
  * of the array must only contain {@code null}-s.
@@ -72,7 +70,7 @@ class TemplateElements {
      */
     TemplateElement asSingleElement() {
         if (count == 0) {
-            return new TextBlock(CollectionUtils.EMPTY_CHAR_ARRAY, false); 
+            return new TextBlock("", false);
         } else {
             TemplateElement first = buffer[0];
             if (count == 1) {
@@ -100,3 +98,5 @@ class TemplateElements {
     }
 
 }
+
+/* @generated */
\ No newline at end of file
diff --git a/freemarker/core/TextBlock.java b/freemarker/core/TextBlock.java
index 8be305be16bf..2533a3824807 100644
--- a/freemarker/core/TextBlock.java
+++ b/freemarker/core/TextBlock.java
@@ -21,7 +21,6 @@ package freemarker.core;
 
 import java.io.IOException;
 
-import freemarker.template.utility.CollectionUtils;
 import freemarker.template.utility.StringUtil;
 
 /**
@@ -36,7 +35,7 @@ public final class TextBlock extends TemplateElement {
     // using String.getChars(), and then calling Writer.write(char[]). By
     // using Writer.write(char[]) directly, we avoid array copying on each 
     // write. 
-    private char[] text;
+    private String text;
     private final boolean unparsed;
 
     public TextBlock(String text) {
@@ -44,16 +43,12 @@ public final class TextBlock extends TemplateElement {
     }
 
     public TextBlock(String text, boolean unparsed) {
-        this(text.toCharArray(), unparsed);
-    }
-
-    TextBlock(char[] text, boolean unparsed) {
         this.text = text;
         this.unparsed = unparsed;
     }
     
     void replaceText(String text) {
-        this.text = text.toCharArray();
+        this.text = text;
     }
 
     /**
@@ -71,13 +66,13 @@ public final class TextBlock extends TemplateElement {
     @Override
     protected String dump(boolean canonical) {
         if (canonical) {
-            String text = new String(this.text);
+            String text = this.text;
             if (unparsed) {
                 return "<#noparse>" + text + "</#noparse>";
             }
             return text;
         } else {
-            return "text " + StringUtil.jQuote(new String(text));
+            return "text " + StringUtil.jQuote(text);
         }
     }
     
@@ -105,11 +100,11 @@ public final class TextBlock extends TemplateElement {
 
     @Override
     TemplateElement postParseCleanup(boolean stripWhitespace) {
-        if (text.length == 0) return this;
+        if (text.isEmpty()) return this;
         int openingCharsToStrip = 0, trailingCharsToStrip = 0;
         boolean deliberateLeftTrim = deliberateLeftTrim();
         boolean deliberateRightTrim = deliberateRightTrim();
-        if (!stripWhitespace || text.length == 0 ) {
+        if (!stripWhitespace || text.isEmpty() ) {
             return this;
         }
         TemplateElement parentElement = getParentElement();
@@ -125,7 +120,7 @@ public final class TextBlock extends TemplateElement {
         if (openingCharsToStrip == 0 && trailingCharsToStrip == 0) {
             return this;
         }
-        this.text = substring(text, openingCharsToStrip, text.length - trailingCharsToStrip);
+        this.text = text.substring(openingCharsToStrip, text.length() - trailingCharsToStrip);
         if (openingCharsToStrip > 0) {
             this.beginLine++;
             this.beginColumn = 1;
@@ -154,18 +149,18 @@ public final class TextBlock extends TemplateElement {
                     result = true;
                     int lastNewLineIndex = lastNewLineIndex();
                     if (lastNewLineIndex >= 0  || beginColumn == 1) {
-                        char[] firstPart = substring(text, 0, lastNewLineIndex + 1);
-                        char[] lastLine = substring(text, 1 + lastNewLineIndex); 
-                        if (StringUtil.isTrimmableToEmpty(lastLine)) {
+                        String firstPart = text.substring(0, lastNewLineIndex + 1);
+                        String lastLine = text.substring(1+lastNewLineIndex);
+                        if (isTrimmableToEmpty(lastLine)) {
                             this.text = firstPart;
                             this.endColumn = 0;
                         } else {
                             int i = 0;
-                            while (Character.isWhitespace(lastLine[i])) {
+                            while (Character.isWhitespace(lastLine.charAt(i))) {
                                 i++;
                             }
-                            char[] printablePart = substring(lastLine, i);
-                            this.text = concat(firstPart, printablePart);
+                            String printablePart = lastLine.substring(i);
+                            this.text = firstPart.concat(printablePart);
                         }
                     }
                 }
@@ -194,24 +189,24 @@ public final class TextBlock extends TemplateElement {
                     if (firstLineIndex == 0) {
                         return false;
                     }
-                    if (text.length > firstLineIndex 
-                        && text[firstLineIndex - 1] == '\r' 
-                        && text[firstLineIndex] == '\n') {
+                    if (text.length() > firstLineIndex
+                        && text.charAt(firstLineIndex-1) == '\r'
+                        && text.charAt(firstLineIndex) == '\n') {
                         firstLineIndex++;
                     }
-                    char[] trailingPart = substring(text, firstLineIndex);
-                    char[] openingPart = substring(text, 0, firstLineIndex);
-                    if (StringUtil.isTrimmableToEmpty(openingPart)) {
+                    String trailingPart = text.substring(firstLineIndex);
+                    String openingPart = text.substring(0, firstLineIndex);
+                    if (isTrimmableToEmpty(openingPart)) {
                         this.text = trailingPart;
                         this.beginLine++;
                         this.beginColumn = 1;
                     } else {
-                        int lastNonWS = openingPart.length - 1;
-                        while (Character.isWhitespace(text[lastNonWS])) {
+                        int lastNonWS = openingPart.length() - 1;
+                        while (Character.isWhitespace(text.charAt(lastNonWS))) {
                             lastNonWS--;
                         }
-                        char[] printablePart = substring(text, 0, lastNonWS + 1);
-                        if (StringUtil.isTrimmableToEmpty(trailingPart)) {
+                        String printablePart = text.substring(0, lastNonWS+1);
+                        if (isTrimmableToEmpty(trailingPart)) {
                         // THIS BLOCK IS HEINOUS! THERE MUST BE A BETTER WAY! REVISIT (JR)
                             boolean trimTrailingPart = true;
                             for (TemplateElement te = this.nextTerminalNode(); 
@@ -225,9 +220,9 @@ public final class TextBlock extends TemplateElement {
                                     break;
                                 }
                             }
-                            if (trimTrailingPart) trailingPart = CollectionUtils.EMPTY_CHAR_ARRAY;
+                            if (trimTrailingPart) trailingPart = "";
                         }
-                        this.text = concat(printablePart, trailingPart);
+                        this.text = printablePart.concat(trailingPart);
                     }
                 }
             }
@@ -236,9 +231,8 @@ public final class TextBlock extends TemplateElement {
     }
     
     private int firstNewLineIndex() {
-        char[] text = this.text;
-        for (int i = 0; i < text.length; i++) {
-            char c = text[i];
+        for (int i = 0; i < text.length(); i++) {
+            char c = text.charAt(i);
             if (c == '\r' || c == '\n' ) {
                 return i;
             }
@@ -247,9 +241,8 @@ public final class TextBlock extends TemplateElement {
     }
 
     private int lastNewLineIndex() {
-        char[] text = this.text;
-        for (int i = text.length - 1; i >= 0; i--) {
-            char c = text[i];
+        for (int i = text.length() - 1; i >= 0; i--) {
+            char c = text.charAt(i);
             if (c == '\r' || c == '\n' ) {
                 return i;
             }
@@ -267,12 +260,12 @@ public final class TextBlock extends TemplateElement {
             return 0;
         }
         ++newlineIndex;
-        if (text.length > newlineIndex) {
-            if (newlineIndex > 0 && text[newlineIndex - 1] == '\r' && text[newlineIndex] == '\n') {
+        if (text.length() > newlineIndex) {
+            if (newlineIndex > 0 && text.charAt(newlineIndex-1) == '\r' && text.charAt(newlineIndex) == '\n') {
                 ++newlineIndex;
             }
         }
-        if (!StringUtil.isTrimmableToEmpty(text, 0, newlineIndex)) {
+        if (!isTrimmableToEmpty(text, 0, newlineIndex)) {
             return 0;
         }
         // We look at the preceding elements on the line to see if we should
@@ -296,7 +289,7 @@ public final class TextBlock extends TemplateElement {
         if (lastNewlineIndex == -1 && beginColumn != 1) {
             return 0;
         }
-        if (!StringUtil.isTrimmableToEmpty(text, lastNewlineIndex + 1)) {
+        if (!isTrimmableToEmpty(text, lastNewlineIndex + 1)) {
             return 0;
         }
         // We look at the elements afterward on the same line to see if we should
@@ -308,7 +301,7 @@ public final class TextBlock extends TemplateElement {
                 return 0;
             }
         }
-        return text.length - (lastNewlineIndex + 1);
+        return text.length() - (lastNewlineIndex + 1);
     }
 
     @Override
@@ -316,8 +309,8 @@ public final class TextBlock extends TemplateElement {
         if (isIgnorable(true)) {
             return false;
         }
-        for (int i = 0; i < text.length; i++) {
-            char c = text[i];
+        for (int i = 0; i < text.length(); i++) {
+            char c = text.charAt(i);
             if (c == '\n' || c == '\r') {
                 return false;
             }
@@ -333,8 +326,8 @@ public final class TextBlock extends TemplateElement {
         if (isIgnorable(true)) {
             return false;
         }
-        for (int i = text.length - 1; i >= 0; i--) {
-            char c = text[i];
+        for (int i = text.length() - 1; i >= 0; i--) {
+            char c = text.charAt(i);
             if (c == '\n' || c == '\r') {
                 return false;
             }
@@ -347,11 +340,11 @@ public final class TextBlock extends TemplateElement {
 
     @Override
     boolean isIgnorable(boolean stripWhitespace) {
-        if (text == null || text.length == 0) {
+        if (text == null || text.isEmpty()) {
             return true;
         }
         if (stripWhitespace) {
-            if (!StringUtil.isTrimmableToEmpty(text)) {
+            if (!isTrimmableToEmpty(text)) {
                 return false;
             }
             TemplateElement parentElement = getParentElement();
@@ -379,23 +372,6 @@ public final class TextBlock extends TemplateElement {
                 element instanceof LibraryLoad ||
                 element instanceof Comment);
     }
-
-    private static char[] substring(char[] c, int from, int to) {
-        char[] c2 = new char[to - from];
-        System.arraycopy(c, from, c2, 0, c2.length);
-        return c2;
-    }
-    
-    private static char[] substring(char[] c, int from) {
-        return substring(c, from, c.length);
-    }
-    
-    private static char[] concat(char[] c1, char[] c2) {
-        char[] c = new char[c1.length + c2.length];
-        System.arraycopy(c1, 0, c, 0, c1.length);
-        System.arraycopy(c2, 0, c, c1.length, c2.length);
-        return c;
-    }
     
     @Override
     boolean isOutputCacheable() {
@@ -406,5 +382,24 @@ public final class TextBlock extends TemplateElement {
     boolean isNestedBlockRepeater() {
         return false;
     }
-    
+
+    private static boolean isTrimmableToEmpty(String text) {
+        return isTrimmableToEmpty(text, 0, text.length());
+    }
+
+    private static boolean isTrimmableToEmpty(String text, int start) {
+        return isTrimmableToEmpty(text, start, text.length());
+    }
+
+    private static boolean isTrimmableToEmpty(String text, int start, int end) {
+        for (int i = start; i < end; i++) {
+            if (text.charAt(i) > ' ') {
+                return false;
+            }
+        }
+
+        return true;
+    }
+
 }
+/* @generated */
\ No newline at end of file
