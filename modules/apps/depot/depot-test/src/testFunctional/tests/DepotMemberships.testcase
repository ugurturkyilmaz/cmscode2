@component-name = "portal-document-management"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Depot";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONDepot.deleteDepot(depotName = "Test Depot Name");

			Site.tearDownCP();

			User.logoutPG();
		}
	}

	@description = "This ensures that an organization can be added and removed in the membership of an asset library."
	@priority = "5"
	@refactorneeded
	test AddAndRemoveOrganization {
		JSONOrganization.addOrganization(
			organizationName = "Organization Name",
			organizationSite = "true");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepotPortlet(
			depotName = "Test Depot Name",
			portlet = "Memberships");

		Depot.assignOrganizationAsMember(orgName = "Organization Name");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepotPortlet(
			depotName = "Test Depot Name",
			portlet = "Memberships");

		Depot.viewMemberOrganization(orgName = "Organization Name");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepotPortlet(
			depotName = "Test Depot Name",
			portlet = "Memberships");

		Navigator.gotoNavItem(navItem = "Organizations");

		Depot.removeOrganization(orgName = "Organization Name");

		AssertTextEquals(
			locator1 = "Message#EMPTY_INFO",
			value1 = "No organization was found that is a member of this asset library.");
	}

	@description = "This ensures that a user can be added and removed in the membership of an asset library."
	@priority = "5"
	@refactorneeded
	test AddAndRemoveUser {
		property portal.acceptance = "true";

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepotPortlet(
			depotName = "Test Depot Name",
			portlet = "Memberships");

		Depot.assignUserAsMember(
			depotName = "Test Depot Name",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepotPortlet(
			depotName = "Test Depot Name",
			portlet = "Memberships");

		Depot.removeMember(
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepotPortlet(
			depotName = "Test Depot Name",
			portlet = "Memberships");

		AssertElementNotPresent(
			key_card = "userfn userln",
			locator1 = "Card#CARD_TITLE",
			value1 = "userfn userln");
	}

	@description = "This ensures that a user group can be added and removed in the membership of an asset library."
	@priority = "5"
	@refactorneeded
	test AddAndRemoveUserGroup {
		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "User Groups");

		UserGroup.addCP(userGroupName = "User Group Name");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepotPortlet(
			depotName = "Test Depot Name",
			portlet = "Memberships");

		Depot.assignUserGroupAsMember(userGroupName = "User Group Name");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepotPortlet(
			depotName = "Test Depot Name",
			portlet = "Memberships");

		Depot.viewMemberUserGroup(userGroupName = "User Group Name");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepotPortlet(
			depotName = "Test Depot Name",
			portlet = "Memberships");

		Navigator.gotoNavItem(navItem = "User Groups");

		Depot.removeUserGroup(
			bulkEditing = "true",
			userGroupNameList = "User Group Name");

		AssertTextEquals(
			locator1 = "Message#EMPTY_INFO",
			value1 = "No user group was found that is a member of this asset library.");
	}

	@description = "This ensures that an asset library can be assigned to a user from the user profile."
	@priority = "5"
	@refactorneeded
	test AssignALFromUserProfile {
		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		User.editUserAssetLibraryCP(
			depotName = "Test Depot Name",
			userScreenName = "usersn");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepotPortlet(
			depotName = "Test Depot Name",
			portlet = "Memberships");

		LexiconEntry.changeDisplayStyle(displayStyle = "table");

		LexiconEntry.viewEntryName(rowEntry = "userfn userln");
	}

	@description = "This ensures that an asset library with translation can be assigned to a user from the user profile."
	@priority = "3"
	@refactorneeded
	test AssignALWithTranslationForUser {
		property test.name.skip.portal.instance = "DepotMemberships#AssignALWithTranslationForUser";

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		DepotNavigator.openDepotSettingsGeneral(depotName = "Test Depot Name");

		Depot.editDepot(
			checkTranslatedName = "true",
			depotNameEdit = "título",
			language = "es-ES",
			settings = "true");

		User.openUsersAdmin();

		User.editUserAssetLibraryCP(
			depotName = "Test Depot Name",
			userScreenName = "usersn");

		User.openUsersAdmin();

		UserNavigator.gotoUser(userScreenName = "usersn");

		UserNavigator.gotoMemberships();

		AssertTextEquals.assertPartialText(
			key_siteName = "Test Depot Name",
			locator1 = "UsersAndOrganizationsEditUser#SITES_TABLE_NAME",
			value1 = "Test Depot Name");

		Navigator.ensureLocaleURL(locale = "es");

		AssertTextEquals.assertPartialText(
			key_siteName = "título",
			locator1 = "UsersAndOrganizationsEditUser#SITES_TABLE_NAME",
			value1 = "título");
	}

	@description = "This ensures that an assigned asset library can be removed from the user profile."
	@priority = "5"
	@refactorneeded
	test RemoveALFromUserProfile {
		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepotPortlet(
			depotName = "Test Depot Name",
			portlet = "Memberships");

		Depot.assignUserAsMember(
			depotName = "Test Depot Name",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		User.removeUserAssetLibraryCP(
			depotName = "Test Depot Name",
			userScreenName = "usersn");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepotPortlet(
			depotName = "Test Depot Name",
			portlet = "Memberships");

		LexiconEntry.changeDisplayStyle(displayStyle = "table");

		LexiconEntry.viewNoEntry(rowEntry = "userfn userln");
	}

	@description = "This ensures that the asset library can be displayed correctly in the memberships after selecting the same depot for the user."
	@priority = "3"
	@refactorneeded
	test SelectSameDepotForUser {
		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.addUserToDepot(
			depotName = "Test Depot Name",
			userEmailAddress = "userea@liferay.com");

		User.openUsersAdmin();

		UserNavigator.gotoUser(userScreenName = "usersn");

		UserNavigator.gotoMemberships();

		AssertTextEquals(
			key_depotName = "Test Depot Name",
			locator1 = "UsersAndOrganizationsEditUser#DEPOT_TABLE_NAME",
			value1 = "Test Depot Name");

		User.openUsersAdmin();

		User.editUserAssetLibraryCP(
			depotName = "Test Depot Name",
			userScreenName = "usersn");

		AssertTextEquals(
			key_depotName = "Test Depot Name",
			key_position = "1",
			locator1 = "UsersAndOrganizationsEditUser#DEPOT_TABLE_SPECIFIC_NAME",
			value1 = "Test Depot Name");

		AssertElementNotPresent(
			key_depotName = "Test Depot Name",
			key_position = "2",
			locator1 = "UsersAndOrganizationsEditUser#DEPOT_TABLE_SPECIFIC_NAME",
			value1 = "Test Depot Name");
	}

	@description = "This ensures that the organizations page pagination can be displayed correctly in the depot memberships."
	@priority = "3"
	@refactorneeded
	test ViewOrganizationPagination {
		for (var num : list "1,2,3,4,5") {
			JSONOrganization.addOrganization(organizationName = "Organization Name ${num}");
		}

		for (var num : list "1,2,3,4,5") {
			JSONOrganization.addOrganizationToDepot(
				depotName = "Test Depot Name",
				organizationName = "Organization Name ${num}");
		}

		DepotNavigator.openDepotMembershipsAdmin(depotName = "Test Depot Name");

		Navigator.gotoNavItem(navItem = "Organizations");

		Pagination.changePagination(itemsPerPage = "4");

		Pagination.viewResults(results = "Showing 1 to 4 of 5 entries.");

		Click(locator1 = "Pagination#NEXT_LINK");

		Pagination.viewResults(results = "Showing 5 to 5 of 5 entries.");
	}

	@description = "This ensures that the users page pagination can be displayed correctly in the depot memberships."
	@priority = "3"
	@refactorneeded
	test ViewUsersPagination {
		for (var num : list "1,2,3,4,5") {
			JSONUser.addUser(
				userEmailAddress = "userea${num}@liferay.com",
				userFirstName = "userfn${num}",
				userLastName = "userln${num}",
				userScreenName = "usersn${num}");
		}

		for (var num : list "1,2,3,4,5") {
			JSONUser.addUserToDepot(
				depotName = "Test Depot Name",
				userEmailAddress = "userea${num}@liferay.com");
		}

		DepotNavigator.openDepotMembershipsAdmin(depotName = "Test Depot Name");

		Pagination.changePagination(itemsPerPage = "4");

		Pagination.viewResults(results = "Showing 1 to 4 of 6 entries.");

		Click(locator1 = "Pagination#NEXT_LINK");

		Pagination.viewResults(results = "Showing 5 to 6 of 6 entries.");
	}

}