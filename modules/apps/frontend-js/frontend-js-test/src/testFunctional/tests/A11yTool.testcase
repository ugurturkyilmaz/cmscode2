@component-name = "portal-frontend-infrastructure"
definition {

	property osgi.modules.includes = "frontend-js-a11y-sample-web,frontend-js-a11y-web";
	property portal.release = "false";
	property portal.upstream = "quarantine";
	property testray.component.names = "A11y Tool";
	property testray.main.component.name = "User Interface";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "A11y Test Page");

		JSONLayout.addWidgetToPublicLayout(
			groupName = "Guest",
			layoutName = "A11y Test Page",
			widgetName = "JS A11y Sample");

		JSONLayout.updateLayoutTemplateOfPublicLayout(
			groupName = "Guest",
			layoutName = "A11y Test Page",
			layoutTemplate = "1 Column");

		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Blank Test Page");

		Navigator.gotoPage(pageName = "A11y Test Page");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONLayout.deletePublicLayout(
				groupName = "Guest",
				layoutName = "A11y Test Page");

			JSONLayout.deletePublicLayout(
				groupName = "Guest",
				layoutName = "Blank Test Page");
		}
	}

	@description = "LPS-142107. Verifies a11y tool can be disabled."
	@priority = "5"
	test CanBeDisabledWithDevelopment {
		property osgi.module.configuration.file.names = "com.liferay.frontend.js.a11y.web.internal.configuration.FFA11yConfiguration.config";
		property osgi.module.configurations = "enable=B&quot;true&quot;";

		task ("Modify the config file to be set to false") {
			OSGiConfig.deployOSGiConfigFile(
				osgiConfigFileName = "com.liferay.frontend.js.a11y.web.internal.configuration.FFA11yConfiguration.config",
				osgiConfigs = "enable=B&quot;false&quot;");
		}

		task ("Restart portal") {
			Portlet.shutdownServer();

			Portlet.startServer(deleteLiferayHome = "false");
		}

		task ("Assert the side panel is not present on the page") {
			Navigator.gotoPage(pageName = "A11y Test Page");

			AssertElementNotPresent(locator1 = "A11yTool#VIOLATION_PANEL_HEADER");
		}

		takeScreenshot();
	}

	@description = "LPS-142329. Verifies 2 occurrences of the same violation are listed in the side panel."
	@priority = "3"
	test CanDetectMultipleOccurencesOfSameViolations {
		property osgi.module.configuration.file.names = "com.liferay.frontend.js.a11y.web.internal.configuration.FFA11yConfiguration.config";
		property osgi.module.configurations = "enable=B&quot;true&quot;";

		// Workaround for side panel sometimes not displaying LPS-141442

		while (IsElementNotPresent(locator1 = "A11yTool#VIOLATION_PANEL_HEADER")) {
			Refresh();
		}

		task ("Click on the rule with 2 violations") {
			Click(
				key_text = "button-name",
				locator1 = "A11yTool#VIOLATION_PANEL_RULE_LIST_ITEM");
		}

		task ("Assert the 2 occurrences are listed in the side panel") {
			AssertElementPresent(
				key_text = "Occurrence 1",
				locator1 = "A11yTool#VIOLATION_PANEL_OCCURRENCE_LIST_ITEM");

			AssertElementPresent(
				key_text = "Occurrence 2",
				locator1 = "A11yTool#VIOLATION_PANEL_OCCURRENCE_LIST_ITEM");
		}

		task ("Assert the 2 occurrences are highlighted with an icon") {
			AssertElementPresent(
				key_index = "1",
				key_text = "a11y-backdrop",
				locator1 = "A11yTool#HIGHLIGHTED_ELEMENT_OVERLAY");

			AssertElementPresent(
				key_index = "2",
				key_text = "a11y-backdrop",
				locator1 = "A11yTool#HIGHLIGHTED_ELEMENT_OVERLAY");

			AssertElementPresent(
				key_index = "1",
				key_text = "a11y-indicator",
				locator1 = "A11yTool#HIGHLIGHTED_ELEMENT_OVERLAY");

			AssertElementPresent(
				key_index = "2",
				key_text = "a11y-indicator",
				locator1 = "A11yTool#HIGHLIGHTED_ELEMENT_OVERLAY");
		}

		task ("Assert the 1 different violation isn't listed or highlighted") {
			AssertElementNotPresent(
				key_text = "Occurrence 3",
				locator1 = "A11yTool#VIOLATION_PANEL_OCCURRENCE_LIST_ITEM");

			AssertElementNotPresent(
				key_index = "3",
				key_text = "a11y-backdrop",
				locator1 = "A11yTool#HIGHLIGHTED_ELEMENT_OVERLAY");

			AssertElementNotPresent(
				key_index = "3",
				key_text = "a11y-indicator",
				locator1 = "A11yTool#HIGHLIGHTED_ELEMENT_OVERLAY");
		}

		takeScreenshot();
	}

	@description = "LPS-140736. Ensures there is no accessibility side panel on a page with no violations."
	@priority = "5"
	test CanDetectNoViolations {
		property osgi.module.configuration.file.names = "com.liferay.frontend.js.a11y.web.internal.configuration.FFA11yConfiguration.config";
		property osgi.module.configurations = "enable=B&quot;true&quot;";

		task ("Navigate to a page with no violations") {
			Navigator.gotoPage(pageName = "Blank Test Page");
		}

		// Workaround for side panel sometimes displaying previous violations incorrectly LPS-138624

		if (IsElementPresent(locator1 = "A11yTool#VIOLATION_PANEL_HEADER")) {
			Refresh();
		}

		task ("Assert no violations are listed in the side panel") {
			if (IsElementPresent(locator1 = "A11yTool#VIOLATION_PANEL_HEADER")) {
				AssertElementPresent(locator1 = "A11yTool#VIOLATION_PANEL_NO_VIOLATIONS");
			}
		}

		task ("Assert there are no highlighted violations or icons") {
			AssertElementNotPresent(locator1 = "A11yTool#HIGHLIGHTED_ELEMENT");

			AssertElementNotPresent(locator1 = "A11yTool#HIGHLIGHTED_ELEMENT_ICON");
		}

		takeScreenshot();
	}

	@description = "Verifies a11y tool can be deployed and detect an a11y violation"
	@priority = "5"
	test CanDetectViolation {
		property osgi.module.configuration.file.names = "com.liferay.frontend.js.a11y.web.internal.configuration.FFA11yConfiguration.config";
		property osgi.module.configurations = "enable=B&quot;true&quot;";

		// Workaround for side panel sometimes not displaying LPS-141442

		while (IsElementNotPresent(locator1 = "A11yTool#VIOLATION_PANEL_HEADER")) {
			Refresh();
		}

		task ("Assert violations are displayed in the side panel") {
			AssertElementPresent(
				key_text = "",
				locator1 = "A11yTool#VIOLATION_PANEL_RULE_LIST_ITEM");
		}

		task ("Assert there are highlighted violations with icons") {
			AssertElementPresent(locator1 = "A11yTool#HIGHLIGHTED_ELEMENT");

			AssertElementPresent(locator1 = "A11yTool#HIGHLIGHTED_ELEMENT_ICON");
		}

		takeScreenshot();
	}

	@description = "LPS-142325. Verifies a rule violation will be detected when a fragment with a violation is added to a page with no violations."
	@priority = "4"
	test CanDetectViolationInDynamicPage {
		property osgi.module.configuration.file.names = "com.liferay.frontend.js.a11y.web.internal.configuration.FFA11yConfiguration.config";
		property osgi.module.configurations = "enable=B&quot;true&quot;";

		task ("Navigate to a page with no violations") {
			Navigator.gotoPage(pageName = "Blank Test Page");

			// Workaround for side panel sometimes displaying previous violations inccorectly LPS-138624

			if (IsElementPresent(locator1 = "A11yTool#VIOLATION_PANEL_HEADER")) {
				Refresh();
			}

			if (IsElementPresent(locator1 = "A11yTool#VIOLATION_PANEL_HEADER")) {
				VerifyElementPresent(locator1 = "A11yTool#VIOLATION_PANEL_NO_VIOLATIONS");
			}

			AssertElementNotPresent(locator1 = "A11yTool#HIGHLIGHTED_ELEMENT");

			AssertElementNotPresent(locator1 = "A11yTool#HIGHLIGHTED_ELEMENT_ICON");
		}

		task ("Add a widget with a rule violation") {
			JSONLayout.addWidgetToPublicLayout(
				groupName = "Guest",
				layoutName = "Blank Test Page",
				widgetName = "JS A11y Sample");
		}

		task ("Assert the rule violation is highlighted and appear on the side panel") {

			// Workaround for side panel sometimes not displaying LPS-141442

			while (IsElementNotPresent(locator1 = "A11yTool#VIOLATION_PANEL_HEADER")) {
				Refresh();
			}

			AssertElementPresent(
				key_text = "",
				locator1 = "A11yTool#VIOLATION_PANEL_RULE_LIST_ITEM");

			AssertElementPresent(locator1 = "A11yTool#HIGHLIGHTED_ELEMENT");

			AssertElementPresent(locator1 = "A11yTool#HIGHLIGHTED_ELEMENT_ICON");
		}

		takeScreenshot();
	}

	@description = "LPS-142324. Verifies the correct target and code is displayed."
	@priority = "4"
	test CanDisplayTargetCode {
		property osgi.module.configuration.file.names = "com.liferay.frontend.js.a11y.web.internal.configuration.FFA11yConfiguration.config";
		property osgi.module.configurations = "enable=B&quot;true&quot;";

		// Workaround for side panel sometimes not displaying LPS-141442

		while (IsElementNotPresent(locator1 = "A11yTool#VIOLATION_PANEL_HEADER")) {
			Refresh();
		}

		task ("Verifies there are violations on the page") {
			VerifyElementPresent(locator1 = "A11yTool#HIGHLIGHTED_ELEMENT");

			VerifyElementPresent(locator1 = "A11yTool#HIGHLIGHTED_ELEMENT_ICON");
		}

		task ("Click on a rule violation") {
			Click(
				key_text = "button-name",
				locator1 = "A11yTool#VIOLATION_PANEL_RULE_LIST_ITEM");
		}

		task ("Click on an occurrence") {
			Click(
				key_text = "Occurrence 1",
				locator1 = "A11yTool#VIOLATION_PANEL_OCCURRENCE_LIST_ITEM");
		}

		task ("Assert the correct target is displayed on the side panel") {
			AssertElementPresent(
				key_header = "Target",
				key_label = "Target Selector",
				locator1 = "A11yTool#VIOLATION_PANEL_TARGET_CODE_HEADER");

			AssertElementPresent(
				key_text = "button:nth-child(9)",
				locator1 = "A11yTool#VIOLATION_PANEL_OCCURRENCE_TARGET_SELECTOR");
		}

		task ("Assert the correct code is displayed on the side panel") {
			AssertElementPresent(
				key_header = "Code",
				key_label = "Code of the Element",
				locator1 = "A11yTool#VIOLATION_PANEL_TARGET_CODE_HEADER");

			AssertElementPresent(
				key_text = "<button></button>",
				locator1 = "A11yTool#VIOLATION_PANEL_OCCURRENCE_CODE_ELEMENT");
		}

		takeScreenshot();
	}

	@description = "LPS-142330. Verifies the correct target and code is displayed for the second occurrence."
	@priority = "3"
	test CanDisplayTargetCodeOfSecondViolation {
		property osgi.module.configuration.file.names = "com.liferay.frontend.js.a11y.web.internal.configuration.FFA11yConfiguration.config";
		property osgi.module.configurations = "enable=B&quot;true&quot;";

		// Workaround for side panel sometimes not displaying LPS-141442

		while (IsElementNotPresent(locator1 = "A11yTool#VIOLATION_PANEL_HEADER")) {
			Refresh();
		}

		task ("Click the rule violation in the panel") {
			Click(
				key_text = "button-name",
				locator1 = "A11yTool#VIOLATION_PANEL_RULE_LIST_ITEM");
		}

		task ("Click on the 2nd occurrence") {
			Click(
				key_text = "Occurrence 2",
				locator1 = "A11yTool#VIOLATION_PANEL_OCCURRENCE_LIST_ITEM");
		}

		task ("Assert occurrence 2's target and code information is correctly displayed") {
			AssertElementPresent(
				key_header = "Target",
				key_label = "Target Selector",
				locator1 = "A11yTool#VIOLATION_PANEL_TARGET_CODE_HEADER");

			AssertElementPresent(
				key_text = "button:nth-child(10)",
				locator1 = "A11yTool#VIOLATION_PANEL_OCCURRENCE_TARGET_SELECTOR");

			AssertElementPresent(
				key_header = "Code",
				key_label = "Code of the Element",
				locator1 = "A11yTool#VIOLATION_PANEL_TARGET_CODE_HEADER");

			AssertElementPresent(
				key_text = "<button></button>",
				locator1 = "A11yTool#VIOLATION_PANEL_OCCURRENCE_CODE_ELEMENT");
		}

		takeScreenshot();
	}

	@description = "LPS-142327. Verifies the pop up displays detail information about the violation."
	@priority = "3"
	test CanDisplayViolationDetailsInPopUp {
		property osgi.module.configuration.file.names = "com.liferay.frontend.js.a11y.web.internal.configuration.FFA11yConfiguration.config";
		property osgi.module.configurations = "enable=B&quot;true&quot;";

		// Workaround for side panel sometimes not displaying LPS-141442

		while (IsElementNotPresent(locator1 = "A11yTool#VIOLATION_PANEL_HEADER")) {
			Refresh();
		}

		task ("Verfies there are violations on the page") {
			VerifyElementPresent(locator1 = "A11yTool#HIGHLIGHTED_ELEMENT");

			VerifyElementPresent(locator1 = "A11yTool#HIGHLIGHTED_ELEMENT_ICON");
		}

		task ("Click on the icon next to the highlighted violation") {
			Click(locator1 = "A11yTool#HIGHLIGHTED_ELEMENT_ICON");
		}

		task ("Assert the rule name is displayed") {
			AssertElementPresent(
				key_text = "button-name",
				locator1 = "A11yTool#HIGHLIGHTED_ELEMENT_POPOVER_TITLE");
		}

		task ("Assert the impact is displayed") {
			AssertElementPresent(
				key_impact = "critical",
				locator1 = "A11yTool#HIGHLIGHTED_ELEMENT_POPOVER_IMPACT");
		}

		task ("Assert a brief description is displayed") {
			AssertElementPresent(
				key_text = "Buttons must have discernible text",
				locator1 = "A11yTool#HIGHLIGHTED_ELEMENT_POPOVER_DESCRIPTION");
		}

		task ("Assert link to occurrence side panel is displayed") {
			Click(locator1 = "A11yTool#HIGHLIGHTED_ELEMENT_POPOVER_ITEM");

			AssertElementPresent(
				key_text = "Occurrence 1",
				locator1 = "A11yTool#VIOLATION_PANEL_COMPONENT_TITLE");
		}

		takeScreenshot();
	}

	@description = "LPS-142323. Verifies the side panel shows the violation occurrence when clicked from pop up."
	@priority = "4"
	test CanDisplayViolationDetailsInSidePanel {
		property osgi.module.configuration.file.names = "com.liferay.frontend.js.a11y.web.internal.configuration.FFA11yConfiguration.config";
		property osgi.module.configurations = "enable=B&quot;true&quot;";

		// Workaround for side panel sometimes not displaying LPS-141442

		while (IsElementNotPresent(locator1 = "A11yTool#VIOLATION_PANEL_HEADER")) {
			Refresh();
		}

		task ("Verifies there are violations on the page") {
			VerifyElementPresent(locator1 = "A11yTool#HIGHLIGHTED_ELEMENT");

			VerifyElementPresent(locator1 = "A11yTool#HIGHLIGHTED_ELEMENT_ICON");
		}

		task ("Click on the icon next to the highlighted violation") {
			Click(locator1 = "A11yTool#HIGHLIGHTED_ELEMENT_ICON");
		}

		task ("Click on the listed rule violation from the pop up") {
			Click(locator1 = "A11yTool#HIGHLIGHTED_ELEMENT_POPOVER_ITEM");
		}

		task ("Assert the side panel displays the violation occurrence") {
			AssertElementPresent(
				key_text = "Occurrence 1",
				locator1 = "A11yTool#VIOLATION_PANEL_COMPONENT_TITLE");
		}

		takeScreenshot();
	}

	@description = "LPS-142322. Verifies side panel displays information about a violation rule."
	@priority = "4"
	test CanDisplayViolationRuleDetails {
		property osgi.module.configuration.file.names = "com.liferay.frontend.js.a11y.web.internal.configuration.FFA11yConfiguration.config";
		property osgi.module.configurations = "enable=B&quot;true&quot;";

		// Workaround for side panel sometimes not displaying LPS-141442

		while (IsElementNotPresent(locator1 = "A11yTool#VIOLATION_PANEL_HEADER")) {
			Refresh();
		}

		task ("Verify and click on a rule listed on the side panel") {
			VerifyElementPresent(
				key_text = "button-name",
				locator1 = "A11yTool#VIOLATION_PANEL_RULE_LIST_ITEM");

			Click(
				key_text = "button-name",
				locator1 = "A11yTool#VIOLATION_PANEL_RULE_LIST_ITEM");
		}

		task ("Assert the side panel contains info about rule name, impact level, and link to category rule") {
			AssertElementPresent(
				key_text = "button-name",
				locator1 = "A11yTool#VIOLATION_PANEL_COMPONENT_TITLE");

			AssertElementPresent(
				key_impact = "critical",
				locator1 = "A11yTool#VIOLATION_PANEL_COMPONENT_IMPACT");

			AssertElementPresent(
				key_text = "More Info",
				locator1 = "A11yTool#VIOLATION_PANEL_COMPONENT_LINK");
		}

		task ("Assert the side panel displays details about the rule violation") {
			AssertElementPresent(
				key_header = "Details",
				locator1 = "A11yTool#VIOLATION_PANEL_COMPONENT_HEADER");

			AssertElementPresent(
				key_text = "Ensures buttons have discernible text",
				locator1 = "A11yTool#VIOLATION_PANEL_COMPONENT_BODY");
		}

		task ("Assert the side panel lists the occurences") {
			AssertElementPresent(
				key_header = "Occurrences",
				locator1 = "A11yTool#VIOLATION_PANEL_COMPONENT_HEADER");

			AssertElementPresent(
				key_text = "",
				locator1 = "A11yTool#VIOLATION_PANEL_OCCURRENCE_LIST_ITEM");
		}

		takeScreenshot();
	}

	@description = "LPS-142331 Assert that user can filter violations by all impact."
	@priority = "3"
	test CanFilterViolationsByAllImpact {
		property osgi.module.configuration.file.names = "com.liferay.frontend.js.a11y.web.internal.configuration.FFA11yConfiguration.config";
		property osgi.module.configurations = "enable=B&quot;true&quot;";

		// Workaround for side panel sometimes not displaying LPS-141442

		while (IsElementNotPresent(locator1 = "A11yTool#VIOLATION_PANEL_HEADER")) {
			Refresh();
		}

		task ("Set and check the filters.") {
			A11yTool.openFilterPanel();

			A11yTool.checkFilter(filterType = "critical");

			A11yTool.checkFilter(filterType = "serious");

			A11yTool.checkFilter(filterType = "moderate");

			A11yTool.checkFilter(filterType = "minor");

			A11yTool.closeFilterPanel();
		}

		task ("Show four violations and assert elements are highlighted.") {
			A11yTool.assertAllImpactViolationsPresentInSidePanel();

			A11yTool.assertAllImpactViolationsPresentOnPage();

			AssertElementPresent(locator1 = "A11yTool#HIGHLIGHTED_ELEMENT");

			AssertElementPresent(locator1 = "A11yTool#HIGHLIGHTED_ELEMENT_ICON");
		}
	}

	@description = "LPS-141820. Verifies violations can be filtered by 'Critical' only. Also verifies all violations are present when unfiltered."
	@priority = "5"
	test CanFilterViolationsByCriticalImpactOnly {
		property osgi.module.configuration.file.names = "com.liferay.frontend.js.a11y.web.internal.configuration.FFA11yConfiguration.config";
		property osgi.module.configurations = "enable=B&quot;true&quot;";

		// Workaround for side panel sometimes not displaying LPS-141442

		while (IsElementNotPresent(locator1 = "A11yTool#VIOLATION_PANEL_HEADER")) {
			Refresh();
		}

		task ("Verify the page has critical, serious, moderate, minor violations") {
			A11yTool.waitForAllImpactViolationsPresentInSidePanel();

			A11yTool.waitForAllImpactViolationsPresentOnPage();
		}

		task ("Filter impact by Critical") {
			A11yTool.openFilterPanel();

			A11yTool.checkFilter(filterType = "critical");

			A11yTool.closeFilterPanel();
		}

		task ("Assert only critical violations are present on the side panel") {
			AssertElementPresent(
				key_impact = "critical",
				locator1 = "A11yTool#VIOLATION_PANEL_ITEM_IMPACT");

			AssertElementNotPresent(
				key_impact = "serious",
				locator1 = "A11yTool#VIOLATION_PANEL_ITEM_IMPACT");

			AssertElementNotPresent(
				key_impact = "moderate",
				locator1 = "A11yTool#VIOLATION_PANEL_ITEM_IMPACT");

			AssertElementNotPresent(
				key_impact = "minor",
				locator1 = "A11yTool#VIOLATION_PANEL_ITEM_IMPACT");
		}

		task ("Assert only critical elements are highlighted with an icon") {
			AssertElementPresent(
				key_impact = "critical",
				locator1 = "A11yTool#HIGHLIGHTED_ELEMENT_POPOVER_IMPACT");

			AssertElementPresent(locator1 = "A11yTool#HIGHLIGHTED_ELEMENT_ICON");

			AssertElementNotPresent(
				key_impact = "serious",
				locator1 = "A11yTool#HIGHLIGHTED_ELEMENT_POPOVER_IMPACT");

			AssertElementNotPresent(
				key_impact = "moderate",
				locator1 = "A11yTool#HIGHLIGHTED_ELEMENT_POPOVER_IMPACT");

			AssertElementNotPresent(
				key_impact = "minor",
				locator1 = "A11yTool#HIGHLIGHTED_ELEMENT_POPOVER_IMPACT");
		}

		task ("Close critical violations popovers") {
			Click(
				key_index = "1",
				locator1 = "A11yTool#HIGHLIGHTED_ELEMENT_INDEX");

			Click(
				key_index = "2",
				locator1 = "A11yTool#HIGHLIGHTED_ELEMENT_INDEX");
		}

		task ("Unfilter impact by Critical") {
			A11yTool.openFilterPanel();

			A11yTool.uncheckFilter(filterType = "critical");

			A11yTool.closeFilterPanel();
		}

		task ("Assert the page has critical, serious, moderate, minor violations") {
			A11yTool.assertAllImpactViolationsPresentInSidePanel();

			A11yTool.assertAllImpactViolationsPresentOnPage();
		}

		task ("Assert violations are highlighted with an icon") {
			AssertElementPresent(locator1 = "A11yTool#HIGHLIGHTED_ELEMENT");

			AssertElementPresent(locator1 = "A11yTool#HIGHLIGHTED_ELEMENT_ICON");
		}

		takeScreenshot();
	}

	@description = "LPS-141734. Verifies impact and category filters are available."
	@priority = "5"
	test CanFilterViolationsByImpactAndCategory {
		property osgi.module.configuration.file.names = "com.liferay.frontend.js.a11y.web.internal.configuration.FFA11yConfiguration.config";
		property osgi.module.configurations = "enable=B&quot;true&quot;";

		// Workaround for side panel sometimes not displaying LPS-141442

		while (IsElementNotPresent(locator1 = "A11yTool#VIOLATION_PANEL_HEADER")) {
			Refresh();
		}

		task ("Open the filter panel") {
			A11yTool.openFilterPanel();
		}

		task ("Assert toggles to filter by impact and category are displayed") {
			AssertElementPresent(locator1 = "A11yTool#FILTER_BY_IMPACT_HEADER");

			AssertElementPresent(locator1 = "A11yTool#FILTER_BY_CATEGORY_HEADER");

			AssertElementPresent(
				key_text = "",
				locator1 = "A11yTool#FILTER_LIST_ITEM");
		}

		takeScreenshot();
	}

	@description = "LPS-142318. Verifies multiple violations are highlighted with an icon."
	@priority = "4"
	test CanHighlightMultipleViolations {
		property osgi.module.configuration.file.names = "com.liferay.frontend.js.a11y.web.internal.configuration.FFA11yConfiguration.config";
		property osgi.module.configurations = "enable=B&quot;true&quot;";

		// Workaround for side panel sometimes not displaying LPS-141442

		while (IsElementNotPresent(locator1 = "A11yTool#VIOLATION_PANEL_HEADER")) {
			Refresh();
		}

		task ("Verify there are 3 different a11y violations") {
			VerifyElementPresent(
				key_index = "1",
				locator1 = "A11yTool#HIGHLIGHTED_ELEMENT_INDEX");

			VerifyElementPresent(
				key_index = "2",
				locator1 = "A11yTool#HIGHLIGHTED_ELEMENT_INDEX");

			VerifyElementPresent(
				key_index = "3",
				locator1 = "A11yTool#HIGHLIGHTED_ELEMENT_INDEX");
		}

		task ("Assert all 3 violations are highlighted") {
			AssertElementPresent(
				key_index = "1",
				key_text = "a11y-backdrop",
				locator1 = "A11yTool#HIGHLIGHTED_ELEMENT_OVERLAY");

			AssertElementPresent(
				key_index = "2",
				key_text = "a11y-backdrop",
				locator1 = "A11yTool#HIGHLIGHTED_ELEMENT_OVERLAY");

			AssertElementPresent(
				key_index = "3",
				key_text = "a11y-backdrop",
				locator1 = "A11yTool#HIGHLIGHTED_ELEMENT_OVERLAY");
		}

		task ("Assert all 3 violations have an icon") {
			AssertElementPresent(
				key_index = "1",
				key_text = "a11y-indicator",
				locator1 = "A11yTool#HIGHLIGHTED_ELEMENT_OVERLAY");

			AssertElementPresent(
				key_index = "2",
				key_text = "a11y-indicator",
				locator1 = "A11yTool#HIGHLIGHTED_ELEMENT_OVERLAY");

			AssertElementPresent(
				key_index = "3",
				key_text = "a11y-indicator",
				locator1 = "A11yTool#HIGHLIGHTED_ELEMENT_OVERLAY");
		}

		takeScreenshot();
	}

	@description = "LPS-142328. Verifies the popup panel will close when click outside of it."
	@ignore = "true"
	@priority = "3"
	test CanViewViolations {
		property osgi.module.configuration.file.names = "com.liferay.frontend.js.a11y.web.internal.configuration.FFA11yConfiguration.config";
		property osgi.module.configurations = "enable=B&quot;true&quot;";

		// Workaround for side panel sometimes not displaying LPS-141442

		while (IsElementNotPresent(locator1 = "A11yTool#VIOLATION_PANEL_HEADER")) {
			Refresh();
		}

		task ("Click on the icon next to the highlighted violation") {
			Click(locator1 = "A11yTool#HIGHLIGHTED_ELEMENT_ICON");
		}

		task ("Click outside the highlighted violation") {
			Click(locator1 = "//body");
		}

		task ("Assert popup panel is not present") {
			AssertElementNotPresent(locator1 = "A11yTool#HIGHLIGHTED_ELEMENT_POPOVER_ITEM");
		}

		takeScreenshot();
	}

	@description = "LPS-142333. To assert that filters reset to default after page refresh."
	@priority = "2"
	test FiltersAreResetToDefaultAfterPageRefresh {
		property osgi.module.configuration.file.names = "com.liferay.frontend.js.a11y.web.internal.configuration.FFA11yConfiguration.config";
		property osgi.module.configurations = "enable=B&quot;true&quot;";

		// Workaround for side panel sometimes not displaying LPS-141442

		while (IsElementNotPresent(locator1 = "A11yTool#VIOLATION_PANEL_HEADER")) {
			Refresh();
		}

		task ("Set filters, open filter panel, and check the filter.") {
			A11yTool.openFilterPanel();

			A11yTool.checkFilter(filterType = "critical");

			A11yTool.checkFilter(filterType = "serious");

			A11yTool.closeFilterPanel();
		}

		task ("Refresh page and assert filters are default") {
			Refresh();

			A11yTool.openFilterPanel();

			AssertNotChecked.assertNotCheckedNotVisible(
				key_filter = "critical",
				locator1 = "A11yTool#FILTER_CHECKBOX");

			AssertNotChecked.assertNotCheckedNotVisible(
				key_filter = "serious",
				locator1 = "A11yTool#FILTER_CHECKBOX");
		}
	}

	@description = "LPS-142271. Verifies violations are sorted by descending impact."
	@priority = "4"
	test OrdersViolationsByDescendingImpact {
		property osgi.module.configuration.file.names = "com.liferay.frontend.js.a11y.web.internal.configuration.FFA11yConfiguration.config";
		property osgi.module.configurations = "enable=B&quot;true&quot;";

		// Workaround for side panel sometimes not displaying LPS-141442

		while (IsElementNotPresent(locator1 = "A11yTool#VIOLATION_PANEL_HEADER")) {
			Refresh();
		}

		task ("Verifies the panel is in top-level view") {
			VerifyElementPresent(locator1 = "A11yTool#VIOLATION_PANEL_HEADER");

			VerifyElementPresent(
				key_text = "",
				locator1 = "A11yTool#VIOLATION_PANEL_RULE_LIST_ITEM");
		}

		task ("Verfies there are violations on the page") {
			VerifyElementPresent(locator1 = "A11yTool#HIGHLIGHTED_ELEMENT");

			VerifyElementPresent(locator1 = "A11yTool#HIGHLIGHTED_ELEMENT_ICON");
		}

		task ("Asserts the list of rules are sorted in descending impact") {
			AssertElementPresent(
				key_impact = "critical",
				key_index = "1",
				locator1 = "A11yTool#VIOLATION_PANEL_RULE_LIST_INDEX");

			AssertElementPresent(
				key_impact = "serious",
				key_index = "2",
				locator1 = "A11yTool#VIOLATION_PANEL_RULE_LIST_INDEX");

			AssertElementPresent(
				key_impact = "moderate",
				key_index = "3",
				locator1 = "A11yTool#VIOLATION_PANEL_RULE_LIST_INDEX");

			AssertElementPresent(
				key_impact = "minor",
				key_index = "4",
				locator1 = "A11yTool#VIOLATION_PANEL_RULE_LIST_INDEX");
		}

		takeScreenshot();
	}

	@description = "LPS-141455. Verifies the side panel appears with violation(s)."
	@priority = "5"
	test ShowsSidePanelWithViolation {
		property osgi.module.configuration.file.names = "com.liferay.frontend.js.a11y.web.internal.configuration.FFA11yConfiguration.config";
		property osgi.module.configurations = "enable=B&quot;true&quot;";

		// Workaround for side panel sometimes not displaying LPS-141442

		while (IsElementNotPresent(locator1 = "A11yTool#VIOLATION_PANEL_HEADER")) {
			Refresh();
		}

		task ("Assert the side panel is displayed") {
			AssertElementPresent(
				key_text = "",
				locator1 = "A11yTool#VIOLATION_PANEL_RULE_LIST_ITEM");
		}

		takeScreenshot();
	}

}