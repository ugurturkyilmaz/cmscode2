import com.liferay.gradle.util.FileUtil

apply plugin: "com.liferay.defaults.plugin"

task runGradleTest

List<String> outputRelativePaths = []
List<String> taskNames = []

runGradleTest {
	dependsOn clean

	doLast {
		for (String outputRelativePath : outputRelativePaths) {
			assert !outputRelativePath.startsWith("src")
		}

		List<String> expectedTaskNames = ["baseline", "buildBundleDir", "buildCSS", "buildEnvironment", "compileJSP", "compileJava", "compileTestIntegrationJava", "compileTestJava", "copyCSS", "copyLibs", "copyTLDDocResources", "dependencies", "downloadNode", "eclipseJdt", "generateJSPJava", "ideaProject", "ideaWorkspace", "jar", "jarCompileIncludeFragment", "jarJSDoc", "jarJSP", "jarJavadoc", "jarSources", "jarSourcesCommercial", "jarTLDDoc", "javadoc", "jsdoc", "mergeArtifactsPublishCommands", "pmdMain", "pmdTest", "pmdTestIntegration", "processResources", "processTestIntegrationResources", "processTestResources", "projects", "properties", "spotbugsMain", "spotbugsTest", "spotbugsTestIntegration", "tasks", "test", "testIntegration", "tlddoc", "watch", "wrapper", "writeFindBugsProject"]

		for (String taskName : taskNames) {
			assert expectedTaskNames.contains(taskName)
		}

		assert FileUtil.exists(project, "bnd.bnd")
		assert FileUtil.exists(project, "build.gradle")
		assert FileUtil.exists(project, "src/main/java/com/example/sample/GreetingBuilder.java")
		assert FileUtil.exists(project, "src/main/resources/com/example/sample/packageinfo")
	}
}

tasks.withType(Delete) {
	doFirst {
		if (name.startsWith("clean")) {
			Task task = tasks.findByName(name.substring(5).uncapitalize())

			if (task != null) {
				taskNames.add(task.name)

				task.outputs.files.each {
					File outputFile ->

					outputRelativePaths.add(FileUtil.relativize(outputFile, projectDir))
				}
			}
		}
	}
}