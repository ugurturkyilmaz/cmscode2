@component-name = "portal-workflow-ee"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property test.run.environment = "EE";
	property testray.main.component.name = "Kaleo Designer";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			Workflow.tearDownSpecificWorkflowDefinition(workflowDefinitionTitle = "Edited Workflow Definition");

			Workflow.tearDownWorkflowDefinitions();
		}
	}

	@description = "Verify that Action can be added"
	@priority = "4"
	test CanAddAction {
		property test.name.skip.portal.instance = "ProcessBuilderKaleoDesignerReact#CanAddAction";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "Task",
			nodePosition = "-20,-40",
			nodeType = "task");

		ProcessBuilderKaleoDesignerReact.viewAndFillActions(
			actionsTemplateValue = "Action Template",
			executionTypeOption = "On Entry",
			name = "Liferay Actions");

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.viewPropertyValue(
			propertyName = "Actions",
			propertyValue = "Liferay Actions");
	}

	@description = "Verify that Assignment can be added"
	@priority = "4"
	test CanAddAssignment {
		property test.name.skip.portal.instance = "ProcessBuilderKaleoDesignerReact#CanAddAssignment";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Title");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "Task",
			nodePosition = "-20,-100",
			nodeType = "task");

		ProcessBuilderKaleoDesignerReact.selectNode(nodeType = "task");

		ProcessBuilderKaleoDesignerReact.viewAndFillAssignments(
			assignmentType = "Resource Actions",
			resourceActionsText = "Test");

		ProcessBuilderKaleoDesignerReact.viewSelectedAssignments(selectedAssignments = "Resource Actions: Test");
	}

	@description = "Verify that Notification can be added"
	@priority = "4"
	test CanAddNotification {
		property test.name.skip.portal.instance = "ProcessBuilderKaleoDesignerReact#CanAddNotification";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "Task",
			nodePosition = "-20,-40",
			nodeType = "task");

		ProcessBuilderKaleoDesignerReact.viewAndFillNotification(
			name = "Liferay Notification",
			newNotification = "true",
			notificationTemplateValue = "Notification Template",
			notificationTypeOption = "userNotification");

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.viewPropertyValue(
			propertyName = "Notification",
			propertyValue = "Liferay Notification");
	}

	@description = "Verify that Timers can be added"
	@ignore = "Test Stub"
	@priority = "4"
	test CanAddTimers {

		// TODO LRQA-72952 CanAddTimers pending implementation

	}

	@description = "Verify that the user can add translations"
	@ignore = "true"
	@priority = "4"
	test CanAddTranslations {
		property test.name.skip.portal.instance = "ProcessBuilderKaleoDesignerReact#CanAddTranslations";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "Test title");

		ProcessBuilderKaleoDesignerReact.selectTranslationLanguage(
			newTranslationOption = "fr_FR",
			translationOptionSelected = "en-us",
			translationStatus = "warning");

		ProcessBuilderKaleoDesignerReact.editWorkflowTitle(title = "Titre l'epreuve");

		ProcessBuilderKaleoDesignerReact.selectTranslationLanguage(
			newTranslationOption = "pt_BR",
			translationOptionSelected = "fr-fr",
			translationStatus = "warning");

		ProcessBuilderKaleoDesignerReact.editWorkflowTitle(title = "Titulo do teste");

		Workflow.saveDefinition(newKaleoDesigner = "True");

		Workflow.viewWorkflowDefinition(workflowDefinitionTitle = "Test title");

		ProcessBuilderKaleoDesignerReact.viewTranslationLanguageStatus(
			newTranslationOption = "fr_FR",
			translationStatus = "success");

		ProcessBuilderKaleoDesignerReact.viewTranslationLanguageStatus(
			newTranslationOption = "pt_BR",
			translationStatus = "success");
	}

	@description = "LPS-139387 - Verify that the user can cancel the deletion of a node by clicking on the Cancel button"
	test CanCancelDelete {
		property test.name.skip.portal.instance = "ProcessBuilderKaleoDesignerReact#CanCancelDelete";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "Task",
			nodePosition = "-20,-40",
			nodeType = "task");

		ProcessBuilderKaleoDesignerReact.deleteNodeByDeleteKey(
			cancel = "true",
			nodeType = "task",
			title = "Delete Task Node");
	}

	@description = "LPS-139387 - Verify that the user can cancel the deletion of a node by clicking on the X button"
	@priority = "3"
	test CanCloseDeleteModal {
		property test.name.skip.portal.instance = "ProcessBuilderKaleoDesignerReact#CanCloseDeleteModal";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "Task",
			nodePosition = "-20,-40",
			nodeType = "task");

		ProcessBuilderKaleoDesignerReact.deleteNodeByDeleteKey(
			close = "true",
			nodeType = "task",
			title = "Delete Task Node");
	}

	@description = "Verify that the user can create a Template for Notification"
	@priority = "4"
	test CanCreateNotificationTemplate {
		property test.name.skip.portal.instance = "ProcessBuilderKaleoDesignerReact#CanCreateNotificationTemplate";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.addConnector(
			connectorIn = "end",
			connectorLabel = "Start-End Connector",
			connectorOut = "start",
			key_direction = "right");

		ProcessBuilderKaleoDesignerReact.selectNode(nodeType = "start");

		ProcessBuilderKaleoDesignerReact.viewAndFillNotification(
			description = "Notification Description",
			name = "New Notification",
			newNotification = "true",
			notificationTemplateValue = "${userName} sent you a ${entryType} for review in the workflow.",
			notificationTypeOption = "userNotification",
			templateLanguageOption = "FreeMarker");

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.gotoNotification(notificationName = "New Notification");

		ProcessBuilderKaleoDesignerReact.viewNotificationInfo(notificationTemplateValue = "${userName} sent you a ${entryType} for review in the workflow.");

		Button.clickPublish();

		Navigator.gotoBack();

		Navigator.gotoNavItem(navItem = "Configuration");

		Workflow.configureWorkflow(
			workflowDefinition = "New Workflow Definition",
			workflowResourceValue = "Blogs Entry");

		JSONBlog.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		UserBar.gotoDropdownItem(dropdownItem = "Notifications");

		WorkflowAsset.viewNotification(contentBody = "Test Test sent you a Blogs Entry for review in the workflow.");
	}

	@description = "LPS-140056 - Verify that only one transition in the same direction from one node to the other can be created"
	@priority = "4"
	test CanCreateOnlyOneTransitionInSameDirection {
		property test.name.skip.portal.instance = "ProcessBuilderKaleoDesignerReact#CanCreateOnlyOneTransitionInSameDirection";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.addConnector(
			connectorIn = "end",
			connectorLabel = "Start-End Connector1",
			connectorOut = "start",
			key_direction = "right");

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.addConnector(
			connectorIn = "end",
			connectorOut = "start",
			key_direction = "right");

		ProcessBuilderKaleoDesignerReact.viewConnectorPresent(connectorLabel = "START-END CONNECTOR1");

		ProcessBuilderKaleoDesignerReact.viewConnectorNotPresent(connectorLabel = "TRANSITION LABEL");
	}

	@description = "Verify that user can create transition between nodes from the edge of node"
	@priority = "5"
	test CanCreateTransition {
		property test.name.skip.portal.instance = "ProcessBuilderKaleoDesignerReact#CanCreateTransition";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "Task",
			nodePosition = "-20,-100",
			nodeType = "task");

		ProcessBuilderKaleoDesignerReact.addConnector(
			connectorIn = "task",
			connectorLabel = "StartTaskConnector",
			connectorOut = "start",
			key_direction = "right");

		ProcessBuilderKaleoDesignerReact.viewConnectorPresent(connectorLabel = "STARTTASKCONNECTOR");
	}

	@description = "LPS-139387 - Verify that the user is able to delete a node using the Delete key"
	@priority = "4"
	test CanDeleteNodeViaDeleteKey {
		property test.name.skip.portal.instance = "ProcessBuilderKaleoDesignerReact#CanDeleteNodeViaDeleteKey";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "Task",
			nodePosition = "20,-500",
			nodeType = "task");

		ProcessBuilderKaleoDesignerReact.deleteNodeByDeleteKey(
			delete = "true",
			nodeType = "task",
			title = "Delete Task Node");
	}

	@description = "LPS-139387 - Verify that the user is able to delete a node using the Delete icon in the sidebar"
	@priority = "4"
	test CanDeleteNodeViaSidebar {
		property test.name.skip.portal.instance = "ProcessBuilderKaleoDesignerReact#CanDeleteNodeViaSidebar";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "Task",
			nodePosition = "20,-500",
			nodeType = "task");

		ProcessBuilderKaleoDesignerReact.deleteNodeOrConnection(
			modalMessage = "Are you sure you want to delete the selected task node?",
			nodeType = "task",
			title = "Delete Task Node");

		ProcessBuilderKaleoDesignerReact.viewPanelNodeNotPresent(nodeType = "task");
	}

	@description = "Verify that the user can Delete a Draft workflow"
	@priority = "3"
	test CanDeleteWorkflowDefinitionDraft {
		property test.name.skip.portal.instance = "ProcessBuilderKaleoDesignerReact#CanDeleteWorkflowDefinitionDraft";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		Workflow.saveDefinition(newKaleoDesigner = "True");

		Alert.viewSuccessMessageText(successMessage = "Workflow saved.");

		Workflow.openWorkflowListView();

		Workflow.viewDefinitionUnpublished(workflowDefinitionTitle = "New Workflow Definition");

		Workflow.deleteWorkflowDefinition(workflowDefinitionTitle = "New Workflow Definition");

		Workflow.viewDefinitionNotPresent(workflowDefinitionTitle = "New Workflow Definition");
	}

	@description = "LPS-139388 - Verify that the user can edit the node description"
	@priority = "3"
	test CanEditNodeDescription {
		property test.name.skip.portal.instance = "ProcessBuilderKaleoDesignerReact#CanEditNodeDescription";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "Task",
			nodePosition = "-20,-40",
			nodeType = "task");

		ProcessBuilderKaleoDesignerReact.editNodeInformationField(
			infoOption = "Description",
			infoValue = "Liferay LATAM");

		ProcessBuilderKaleoDesignerReact.viewNodeInfo(
			descriptionValue = "Liferay LATAM",
			nodeType = "task");
	}

	@description = "Verify that the user can edit the Description of the Notification"
	@priority = "4"
	test CanEditNotificationDescription {
		property test.name.skip.portal.instance = "ProcessBuilderKaleoDesignerReact#CanEditNotificationDescription";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.selectNode(nodeType = "start");

		ProcessBuilderKaleoDesignerReact.viewAndFillNotification(
			description = "Notification Description",
			name = "New Notification",
			newNotification = "true",
			notificationTemplateValue = "Notification Template",
			notificationTypeOption = "userNotification");

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.gotoNotification(notificationName = "New Notification");

		ProcessBuilderKaleoDesignerReact.viewNotificationInfo(notificationDescription = "Notification Description");

		ProcessBuilderKaleoDesignerReact.viewAndFillNotification(description = "Notification Description Edited");

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.gotoNotification(notificationName = "New Notification");

		ProcessBuilderKaleoDesignerReact.viewNotificationInfo(notificationDescription = "Notification Description Edited");
	}

	@description = "Verify that the user can edit the Name of the Notification"
	@priority = "4"
	test CanEditNotificationName {
		property test.name.skip.portal.instance = "ProcessBuilderKaleoDesignerReact#CanEditNotificationName";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Title");

		ProcessBuilderKaleoDesignerReact.selectNode(nodeType = "start");

		ProcessBuilderKaleoDesignerReact.viewAndFillNotification(
			name = "Liferay Notification",
			newNotification = "true",
			notificationTemplateValue = "New Notification Template",
			notificationTypeOption = "email");

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.viewNotificationPresent(notificationName = "Liferay Notification");

		ProcessBuilderKaleoDesignerReact.gotoNotification(notificationName = "Liferay Notification");

		ProcessBuilderKaleoDesignerReact.viewNotificationInfo(notificationName = "Liferay Notification");

		ProcessBuilderKaleoDesignerReact.viewAndFillNotification(name = "Workflow Notifications");

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.viewNotificationPresent(notificationName = "Workflow Notifications");
	}

	@description = "Verify that the user can edit a Template for Notification"
	@priority = "4"
	test CanEditNotificationTemplate {
		property test.name.skip.portal.instance = "ProcessBuilderKaleoDesignerReact#CanEditNotificationTemplate";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Title");

		ProcessBuilderKaleoDesignerReact.selectNode(nodeType = "start");

		ProcessBuilderKaleoDesignerReact.viewAndFillNotification(
			name = "New Notification",
			newNotification = "true",
			notificationTemplateValue = "Notification Template",
			notificationTypeOption = "email",
			templateLanguageOption = "Text");

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.gotoNotification(notificationName = "New Notification");

		ProcessBuilderKaleoDesignerReact.viewNotificationInfo(notificationTemplateValue = "Notification Template");

		ProcessBuilderKaleoDesignerReact.viewAndFillNotification(
			notificationTemplateValue = '''${userName} sent you a ${entryType} for review in the workflow. Go Check it!''',
			templateLanguageOption = "FreeMarker");

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.gotoNotification(notificationName = "New Notification");

		ProcessBuilderKaleoDesignerReact.viewNotificationInfo(notificationTemplateValue = '''${userName} sent you a ${entryType} for review in the workflow. Go Check it!''');
	}

	@description = "LPS-139387 - Verify that the user is able to view and edit the nodes ID in the sidebar"
	@priority = "4"
	test CanEditStepID {
		property test.name.skip.portal.instance = "ProcessBuilderKaleoDesignerReact#CanEditStepID";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Title");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "Task",
			nodePosition = "-20,-100",
			nodeType = "task");

		ProcessBuilderKaleoDesignerReact.selectNode(nodeType = "task");

		ProcessBuilderKaleoDesignerReact.viewFieldPresentOnSideBar(fieldName = "Node ID");

		ProcessBuilderKaleoDesignerReact.editNodeInformationField(
			infoOption = "Id",
			infoValue = "task_22");

		ProcessBuilderKaleoDesignerReact.viewNodeInfo(
			idValue = "task_22",
			nodeType = "task");
	}

	@description = "LPS-139387 - Verify that the user is able to view and edit the node's Label in the sidebar"
	@priority = "4"
	test CanEditStepLabel {
		property test.name.skip.portal.instance = "ProcessBuilderKaleoDesignerReact#CanEditStepLabel";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "Task",
			nodePosition = "-20,-40",
			nodeType = "task");

		ProcessBuilderKaleoDesignerReact.editNodeInformationField(
			infoOption = "Label",
			infoValue = "QA Test 2022");

		ProcessBuilderKaleoDesignerReact.viewNodeInfo(
			labelValue = "QA Test 2022",
			nodeType = "task");

		ProcessBuilderKaleoDesignerReact.viewSpecificNodeLabel(
			nodeLabel = "QA Test 2022",
			nodeType = "task");
	}

	@description = "Verify that the user can edit the Template Language of the Notification to FreeMarker"
	@priority = "4"
	test CanEditTemplateLanguageToFreeMarker {
		property test.name.skip.portal.instance = "ProcessBuilderKaleoDesignerReact#CanEditTemplateLanguageToFreeMarker";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.selectNode(nodeType = "start");

		ProcessBuilderKaleoDesignerReact.viewAndFillNotification(
			name = "New Notification",
			newNotification = "true",
			notificationTemplateValue = "New Notification Template",
			notificationTypeOption = "userNotification",
			templateLanguageOption = "FreeMarker");

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.gotoNotification(notificationName = "New Notification");

		ProcessBuilderKaleoDesignerReact.viewNotificationInfo(notificationTemplateLanguage = "FreeMarker");
	}

	@description = "Verify that the user can edit the Template Language of the Notification to Text"
	@priority = "4"
	test CanEditTemplateLanguageToText {
		property test.name.skip.portal.instance = "ProcessBuilderKaleoDesignerReact#CanEditTemplateLanguageToText";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Title");

		ProcessBuilderKaleoDesignerReact.selectNode(nodeType = "start");

		ProcessBuilderKaleoDesignerReact.viewAndFillNotification(
			name = "New Notification",
			newNotification = "true",
			notificationTemplateValue = "Notification Template",
			notificationTypeOption = "email",
			templateLanguageOption = "Text");

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.gotoNotification(notificationName = "New Notification");

		ProcessBuilderKaleoDesignerReact.viewNotificationInfo(notificationTemplateLanguage = "Text");
	}

	@description = "Verify that the user can edit the Template Language of the Notification to Velocity"
	@priority = "4"
	test CanEditTemplateLanguageToVelocity {
		property test.name.skip.portal.instance = "ProcessBuilderKaleoDesignerReact#CanEditTemplateLanguageToVelocity";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Title");

		ProcessBuilderKaleoDesignerReact.selectNode(nodeType = "start");

		ProcessBuilderKaleoDesignerReact.viewAndFillNotification(
			name = "New Notification",
			newNotification = "true",
			notificationTemplateValue = "Notification Template",
			notificationTypeOption = "email",
			templateLanguageOption = "Velocity");

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.gotoNotification(notificationName = "New Notification");

		ProcessBuilderKaleoDesignerReact.viewNotificationInfo(notificationTemplateLanguage = "Velocity");
	}

	@description = "LPS-140056 - Verify that the user is able to edit the transition ID"
	@priority = "4"
	test CanEditTransitionID {
		property test.name.skip.portal.instance = "ProcessBuilderKaleoDesignerReact#CanEditTransitionID";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.addConnector(
			connectorIn = "end",
			connectorLabel = "Start-End Connector",
			connectorOut = "start",
			key_direction = "right");

		ProcessBuilderKaleoDesignerReact.editConnectorTransitionField(
			connectorLabel = "START-END CONNECTOR",
			nodeId = "New ID");

		Button.clickPublish();

		ProcessBuilderKaleoDesignerReact.viewConnectorID(
			connectorLabel = "START-END CONNECTOR",
			nodeId = "New ID");
	}

	@description = "LPS-139387 - Verify that the user can hide/show the information area"
	@priority = "2"
	test CanHideShowInformationArea {
		property test.name.skip.portal.instance = "ProcessBuilderKaleoDesignerReact#CanHideShowInformationArea";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "Condition",
			nodePosition = "-20,-100",
			nodeType = "condition");

		ProcessBuilderKaleoDesignerReact.viewNodeInfo(
			descriptionValue = "Execute conditional logic.",
			idValue = "item_2",
			labelValue = "Condition",
			nodeType = "condition",
			scriptValue = '''returnValue = "Transition Name"''');

		ProcessBuilderKaleoDesignerReact.hideSidebarFields(property = "Information");

		ProcessBuilderKaleoDesignerReact.viewNodeInfoNotVisible(
			descriptionValue = "Execute conditional logic.",
			idValue = "item_2",
			labelValue = "Condition",
			nodeType = "condition",
			scriptValue = '''returnValue = "Transition Name"''');
	}

	@description = "LPS-139387 - Verify that when the user adds a translation to another language the user is able to localize the Step Label of the node."
	@ignore = "Test Stub"
	@priority = "4"
	test CanLocalizeStepLabelWhenTranslated {

		// TODO LRQA-72982 CanLocalizeStepLabelWhenTranslated pending implementation

	}

	@description = "LPS-140056 - Verify that the user is able to localize the label of the transition"
	@priority = "3"
	test CanLocalizeTransitionLabel {
		property test.name.skip.portal.instance = "ProcessBuilderKaleoDesignerReact#CanLocalizeTransitionLabel";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.addConnector(
			connectorIn = "end",
			connectorLabel = "Start-End Connector",
			connectorOut = "start",
			key_direction = "right");

		ProcessBuilderKaleoDesignerReact.viewConnectorPresent(connectorLabel = "START-END CONNECTOR");
	}

	@description = "Verify that the user can move nodes in diagram by drag&drop in the middle of node"
	@priority = "4"
	test CanMoveNode {
		property test.name.skip.portal.instance = "ProcessBuilderKaleoDesignerReact#CanMoveNode";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Title");

		ProcessBuilderKaleoDesignerReact.selectNode(nodeType = "start");

		ProcessBuilderKaleoDesignerReact.viewNodePosition(
			nodeLabel = "Start",
			nodeType = "start",
			nodeXPosition = "300",
			nodeYPosition = "100");

		ProcessBuilderKaleoDesignerReact.dragAndDropDiagramNode(
			nodePosition = "100,-50",
			nodeType = "start");

		ProcessBuilderKaleoDesignerReact.viewNodePosition(
			firstNodeXPosition = "300",
			firstNodeYPosition = "100",
			newPosition = "true",
			nodeLabel = "Start",
			nodeType = "start",
			nodeXPosition = "400",
			nodeYPosition = "50");
	}

	@description = "Verify that is not possible to have multiple Start nodes"
	@ignore = "Test Stub"
	@priority = "4"
	test CanNotHaveMultipleStartNode {

		// TODO LRQA-72940 CanNotHaveMultipleStartNode pending implementation

	}

	@description = "LPS-139388 - Verify that nodes behave correctly when we import a workflow with the same names for different elements"
	@ignore = "Test Stub"
	@priority = "4"
	test CanNotImportProcessWithDuplicatedElementNames {

		// TODO LRQA-72988 CanNotImportProcessWithDuplicatedElementNames pending implementation

	}

	@description = "LPS-129928 - Verify that the collision detection between nodes are working after moving nodes on canvas"
	@ignore = "Test Stub"
	@priority = "3"
	test CanNotPlaceNodeOverAnother {

		// TODO LRQA-73005 CanNotPlaceNodeOverAnother pending implementation

	}

	@description = "LPS-139388 - Verify that is not possible to save a process with node ID not unique"
	@priority = "4"
	test CanNotSaveProcessWithDuplicatedNodeID {
		property test.name.skip.portal.instance = "ProcessBuilderKaleoDesignerReact#CanNotSaveProcessWithDuplicatedNodeID";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.selectNode(nodeType = "end");

		ProcessBuilderKaleoDesignerReact.editNodeInformationField(
			infoOption = "Id",
			infoValue = "item_0");

		ProcessBuilderKaleoDesignerReact.viewSidebarFeedback(sidebarMessage = "A node with that ID already exists. Enter a unique ID.");

		Workflow.saveDefinition(newKaleoDesigner = "True");

		ProcessBuilderKaleoDesignerReact.viewDuplicatedIdAlert();
	}

	@description = "LPS-139388 - Verify that is not possible to save a process with the node ID not filled"
	@priority = "4"
	test CanNotSaveProcessWithEmptyNodeID {
		property test.name.skip.portal.instance = "ProcessBuilderKaleoDesignerReact#CanNotSaveProcessWithEmptyNodeID";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "Task",
			nodePosition = "-20,-100",
			nodeType = "task");

		ProcessBuilderKaleoDesignerReact.editNodeInformationField(
			infoOption = "Id",
			infoValue = "");

		ProcessBuilderKaleoDesignerReact.viewRequiredField(
			requiredField = "nodeId",
			save = "true");
	}

	@description = "LPS-139388 - Verify that, when all the parallel reviews are complete, the Join node will allow the instance to progress to the next step"
	@ignore = "Test Stub"
	@priority = "4"
	test CanProgressToNextStepWhenParallelTasksCompleted {

		// TODO LRQA-72985 CanProgressToNextStepWhenParallelTasksCompleted pending implementation

	}

	@description = "Verify that the user can Publish workflow"
	@priority = "5"
	test CanPublishWorkflow {
		property test.name.skip.portal.instance = "ProcessBuilderKaleoDesignerReact#CanPublishWorkflow";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.addConnector(
			connectorIn = "end",
			connectorLabel = "Start Task Connector",
			connectorOut = "start",
			key_direction = "top");

		PortletEntry.publish();

		Alert.viewSuccessMessageText(successMessage = "Workflow published successfully.");

		Workflow.openWorkflowListView();

		Workflow.viewDefinitionPublished(workflowDefinitionTitle = "New Workflow Definition");
	}

	@description = "Verify that user can Save workflow as Draft"
	@priority = "5"
	test CanSaveAsDraft {
		property test.name.skip.portal.instance = "ProcessBuilderKaleoDesignerReact#CanSaveAsDraft";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition Title");

		Workflow.saveDefinition(newKaleoDesigner = "True");

		Alert.viewSuccessMessageText(successMessage = "Workflow saved.");

		Workflow.openWorkflowListView();

		Workflow.viewDefinitionUnpublished(workflowDefinitionTitle = "New Workflow Definition Title");
	}

	@description = "LPS-139387 - Verify that the user is able to see the Start and End nodes on the Diagram when creating a New Process"
	@priority = "4"
	test CanSeeStartAndEndNodesByDefault {
		property test.name.skip.portal.instance = "ProcessBuilderKaleoDesignerReact#CanSeeStartAndEndNodesByDefault";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Title");

		ProcessBuilderKaleoDesignerReact.selectNode(nodeType = "start");

		ProcessBuilderKaleoDesignerReact.selectNode(nodeType = "end");
	}

	@description = "Verify that the is able to select who receives the notification: Asset Creator"
	@priority = "5"
	test CanSelectAssetCreatorAsNotificationRecipientType {
		property test.name.skip.portal.instance = "ProcessBuilderKaleoDesignerReact#CanSelectAssetCreatorAsNotificationRecipientType";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.selectNode(nodeType = "start");

		ProcessBuilderKaleoDesignerReact.viewAndFillNotification(
			name = "New Notification",
			newNotification = "true",
			notificationTemplateValue = "New Notification Template",
			notificationTypeOption = "email",
			recipientTypeOption = "Asset Creator");

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.gotoNotification(notificationName = "New Notification");

		ProcessBuilderKaleoDesignerReact.viewNotificationInfo(notificationRecipientType = "Asset Creator");
	}

	@description = "Verify that the user can select Email as Notification type"
	@priority = "5"
	test CanSelectEmailAsNotificationType {
		property test.name.skip.portal.instance = "ProcessBuilderKaleoDesignerReact#CanSelectEmailAsNotificationType";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.selectNode(nodeType = "start");

		ProcessBuilderKaleoDesignerReact.viewAndFillNotification(
			name = "New Notification",
			newNotification = "true",
			notificationTemplateValue = "New Notification Template",
			notificationTypeOption = "email");

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.gotoNotification(notificationName = "New Notification");

		ProcessBuilderKaleoDesignerReact.viewNotificationInfo(notificationTypeOption = "email");
	}

	@description = "Verify that the user can select each node in Diagram"
	@priority = "4"
	test CanSelectNodeOnDiagram {
		property test.name.skip.portal.instance = "ProcessBuilderKaleoDesignerReact#CanSelectNodeOnDiagram";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Title");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "Task",
			nodePosition = "-20,-100",
			nodeType = "task");

		ProcessBuilderKaleoDesignerReact.selectNode(nodeType = "start");

		ProcessBuilderKaleoDesignerReact.viewSelectedNode(nodeType = "start");

		ProcessBuilderKaleoDesignerReact.selectNode(nodeType = "end");

		ProcessBuilderKaleoDesignerReact.viewSelectedNode(nodeType = "end");

		ProcessBuilderKaleoDesignerReact.selectNode(nodeType = "task");

		ProcessBuilderKaleoDesignerReact.viewSelectedNode(nodeType = "task");
	}

	@description = "Verify that the user can select On Assignment as the time when the notification will be sent in a task"
	@priority = "4"
	test CanSelectOnAssignmentAsExecutionTypeAtTaskNotifications {
		property test.name.skip.portal.instance = "ProcessBuilderKaleoDesignerReact#CanSelectOnAssignmentAsExecutionTypeAtTaskNotifications";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Title");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "Task",
			nodePosition = "-20,-100",
			nodeType = "task");

		ProcessBuilderKaleoDesignerReact.viewAndFillNotification(
			executionTypeOption = "On Assignment",
			name = "Liferay Notification",
			newNotification = "true",
			notificationTemplateValue = "Notification Template",
			notificationTypeOption = "email");

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.gotoNotification(notificationName = "Liferay Notification");

		ProcessBuilderKaleoDesignerReact.viewNotificationInfo(notificationExecutionType = "On Assignment");
	}

	@description = "Verify that the user can select On Entry as the time when the notification will be sent"
	@priority = "4"
	test CanSelectOnEntryAsExecutionTypeAtNodeNotifications {
		property test.name.skip.portal.instance = "ProcessBuilderKaleoDesignerReact#CanSelectOnEntryAsExecutionTypeAtNodeNotifications";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.selectNode(nodeType = "start");

		ProcessBuilderKaleoDesignerReact.viewAndFillNotification(
			executionTypeOption = "On Entry",
			name = "Liferay Notification",
			newNotification = "true",
			notificationTemplateValue = "Notification Template",
			notificationTypeOption = "email");

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.gotoNotification(notificationName = "Liferay Notification");

		ProcessBuilderKaleoDesignerReact.viewNotificationInfo(notificationExecutionType = "On Entry");
	}

	@description = "Verify that the user can select On Exit as the time when the notification will be sent"
	@priority = "4"
	test CanSelectOnExitAsExecutionTypeAtNodeNotifications {
		property test.name.skip.portal.instance = "ProcessBuilderKaleoDesignerReact#CanSelectOnExitAsExecutionTypeAtNodeNotifications";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.selectNode(nodeType = "start");

		ProcessBuilderKaleoDesignerReact.viewAndFillNotification(
			executionTypeOption = "On Exit",
			name = "Liferay Notification",
			newNotification = "true",
			notificationTemplateValue = "Notification Template",
			notificationTypeOption = "email");

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.gotoNotification(notificationName = "Liferay Notification");

		ProcessBuilderKaleoDesignerReact.viewNotificationInfo(notificationExecutionType = "On Exit");
	}

	@description = "Verify that the is able to select who receives the notification: Role"
	@priority = "5"
	test CanSelectRoleAsNotificationRecipientType {
		property test.name.skip.portal.instance = "ProcessBuilderKaleoDesignerReact#CanSelectRoleAsNotificationRecipientType";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.selectNode(nodeType = "start");

		ProcessBuilderKaleoDesignerReact.viewAndFillNotification(
			name = "New Notification",
			newNotification = "true",
			notificationsRecipientTypeRoleName = "Account Manager",
			notificationTemplateValue = "New Notification Template",
			notificationTypeOption = "email",
			recipientTypeOption = "Role");

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.gotoNotification(notificationName = "New Notification");

		ProcessBuilderKaleoDesignerReact.viewNotificationInfo(notificationRecipientType = "Role");
	}

	@description = "Verify that the is able to select who receives the notification: Scripted Recipient"
	@priority = "5"
	test CanSelectScriptedRecipientAsNotificationRecipientType {
		property test.name.skip.portal.instance = "ProcessBuilderKaleoDesignerReact#CanSelectScriptedRecipientAsNotificationRecipientType";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Title");

		ProcessBuilderKaleoDesignerReact.selectNode(nodeType = "start");

		ProcessBuilderKaleoDesignerReact.viewAndFillNotification(
			name = "New Notification",
			newNotification = "true",
			notificationScript = '''returnValue = "Transition Name";''',
			notificationTemplateValue = '''${userName} sent you a ${entryType} for review in the workflow.''',
			notificationTypeOption = "userNotification",
			recipientTypeOption = "Scripted Recipient");

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.gotoNotification(notificationName = "New Notification");

		ProcessBuilderKaleoDesignerReact.viewNotificationInfo(notificationRecipientType = "Scripted Recipient");
	}

	@description = "Verify that the is able to select who receives the notification: Task Assignees"
	@priority = "5"
	test CanSelectTaskAssigneesAsNotificationRecipientTypeAtTaskNode {
		property test.name.skip.portal.instance = "ProcessBuilderKaleoDesignerReact#CanSelectTaskAssigneesAsNotificationRecipientTypeAtTaskNode";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Title");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "Task",
			nodePosition = "-20,-100",
			nodeType = "task");

		ProcessBuilderKaleoDesignerReact.viewAndFillNotification(
			name = "New Notification",
			newNotification = "true",
			notificationTemplateValue = '''${userName} sent you a ${entryType} for review in the workflow.''',
			notificationTypeOption = "userNotification",
			recipientTypeOption = "Task Assignees");

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.gotoNotification(notificationName = "New Notification");

		ProcessBuilderKaleoDesignerReact.viewNotificationInfo(notificationRecipientType = "Task Assignees");
	}

	@description = "Verify that the user can select Email and User Notification as Notification type"
	@priority = "5"
	test CanSelectUserNotificationAndEmailAsNotificationType {
		property test.name.skip.portal.instance = "ProcessBuilderKaleoDesignerReact#CanSelectUserNotificationAndEmailAsNotificationType";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.selectNode(nodeType = "start");

		ProcessBuilderKaleoDesignerReact.viewAndFillNotification(
			name = "Liferay Notification",
			newNotification = "true",
			notificationTemplateValue = "Notification Template",
			notificationTypeOption = "email");

		ProcessBuilderKaleoDesignerReact.viewAndFillNotification(notificationTypeOption = "userNotification");

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.gotoNotification(notificationName = "Liferay Notification");

		ProcessBuilderKaleoDesignerReact.viewNotificationInfo(notificationTypeOption = "email");

		ProcessBuilderKaleoDesignerReact.viewNotificationInfo(notificationTypeOption = "userNotification");
	}

	@description = "Verify that the user can select User Notification as Notification type"
	@priority = "5"
	test CanSelectUserNotificationAsNotificationType {
		property test.name.skip.portal.instance = "ProcessBuilderKaleoDesignerReact#CanSelectUserNotificationAsNotificationType";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Title");

		ProcessBuilderKaleoDesignerReact.selectNode(nodeType = "start");

		ProcessBuilderKaleoDesignerReact.viewAndFillNotification(
			name = "New Notification",
			newNotification = "true",
			notificationTemplateValue = '''${userName} sent you a ${entryType} for review in the workflow.''',
			notificationTypeOption = "userNotification");

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.gotoNotification(notificationName = "New Notification");

		ProcessBuilderKaleoDesignerReact.viewNotificationInfo(notificationTypeOption = "userNotification");
	}

	@description = "Verify that the user can set transition Default"
	@priority = "4"
	test CanSetDefaultTransition {
		property test.name.skip.portal.instance = "ProcessBuilderKaleoDesignerReact#CanSetDefaultTransition";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.addConnector(
			connectorIn = "end",
			connectorLabel = "StartEndConnector",
			connectorOut = "start",
			key_direction = "bottom");

		ProcessBuilderKaleoDesignerReact.viewDefaultToggleStatus(
			connectorLabel = "STARTENDCONNECTOR",
			defaultStatus = "True");

		ProcessBuilderKaleoDesignerReact.clickDefaultToggle(defaultConnector = "False");

		ProcessBuilderKaleoDesignerReact.viewDefaultToggleStatus(
			connectorLabel = "STARTENDCONNECTOR",
			defaultStatus = "False");

		ProcessBuilderKaleoDesignerReact.clickDefaultToggle(defaultConnector = "True");

		ProcessBuilderKaleoDesignerReact.viewDefaultToggleStatus(
			connectorLabel = "STARTENDCONNECTOR",
			defaultStatus = "True");
	}

	@description = "LPS-129928 - Verify that when the user clicks on the Diagram view button the Diagram editor appears"
	@priority = "4"
	test CanViewDiagramEditor {
		property test.name.skip.portal.instance = "ProcessBuilderKaleoDesignerReact#CanViewDiagramEditor";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.diagramSourceSwitchView();

		ProcessBuilderKaleoDesignerReact.viewSourceEditor();

		ProcessBuilderKaleoDesignerReact.diagramSourceSwitchView();

		ProcessBuilderKaleoDesignerReact.viewDiagramEditor(
			endLabelList = "End",
			startLabelList = "Start");
	}

	@description = "LPS-129928 - Verify that when the user clicks on the Source button the Source editor appears"
	@priority = "4"
	test CanViewSourceEditor {
		property test.name.skip.portal.instance = "ProcessBuilderKaleoDesignerReact#CanViewSourceEditor";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.diagramSourceSwitchView();

		ProcessBuilderKaleoDesignerReact.viewSourceEditor();
	}

	@description = "LPS-129928 - Verify that when the user makes changes to the Process Builder these changes are reflected in the XML code"
	@priority = "5"
	test ChangesOnDiagramAreReflectedOnXML {
		property test.name.skip.portal.instance = "ProcessBuilderKaleoDesignerReact#ChangesOnDiagramAreReflectedOnXML";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "Workflow Title");

		ProcessBuilderKaleoDesignerReact.diagramSourceSwitchView();

		ProcessBuilderKaleoDesignerReact.viewXMLSourceCodeSnippet(codeSnippet = "Start");

		ProcessBuilderKaleoDesignerReact.diagramSourceSwitchView();

		ProcessBuilderKaleoDesignerReact.selectNode(nodeType = "start");

		ProcessBuilderKaleoDesignerReact.editNodeInformationField(
			infoOption = "Label",
			infoValue = "Created");

		ProcessBuilderKaleoDesignerReact.diagramSourceSwitchView();

		ProcessBuilderKaleoDesignerReact.viewXMLSourceCodeSnippet(
			codeSnippet = "Created",
			codeSnippetNotPresent = "Start");
	}

	@description = "LPS-129928 - Verify that when the user makes changes to the XML code these changes are reflected in the Process Builder"
	@ignore = "Test Stub"
	@priority = "5"
	test ChangesOnXMLAreReflectedOnDiagram {

		// TODO LRQA-72999 ChangesOnXMLAreReflectedOnDiagram pending implementation

	}

	@description = "Verify that Condition Node do not have Timers property"
	@priority = "4"
	test ConditionHasNoTimersProperty {
		property test.name.skip.portal.instance = "ProcessBuilderKaleoDesignerReact#ConditionHasNoTimersProperty";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Title");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "Condition",
			nodePosition = "-20,-100",
			nodeType = "condition");

		ProcessBuilderKaleoDesignerReact.selectNode(nodeType = "condition");

		ProcessBuilderKaleoDesignerReact.viewFieldNotPresentOnSideBar(fieldName = "Timers");
	}

	@description = "Verify that the Condition node must have at least two outgoing transitions"
	@ignore = "Test Stub"
	@priority = "4"
	test ConditionMustHaveMoreThanOneTransition {

		// TODO LRQA-72941 ConditionMustHaveMoreThanOneTransition pending implementation

	}

	@description = "Verify that connectors can be deleted"
	@priority = "4"
	test ConnectorCanBeDeleted {
		property test.name.skip.portal.instance = "ProcessBuilderKaleoDesignerReact#ConnectorCanBeDeleted";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.addConnector(
			connectorIn = "end",
			connectorLabel = "Start Task Connector",
			connectorOut = "start",
			key_direction = "top");

		ProcessBuilderKaleoDesignerReact.selectConnector(connectorLabel = "START TASK CONNECTOR");

		ProcessBuilderKaleoDesignerReact.deleteNodeOrConnection(title = "Delete Transition");

		ProcessBuilderKaleoDesignerReact.viewConnectorNotPresent(connectorLabel = "START TASK CONNECTOR");
	}

	@description = "Verify that the user can edit the connectors label"
	@priority = "4"
	test ConnectorsLabelCanBeEdited {
		property test.name.skip.portal.instance = "ProcessBuilderKaleoDesignerReact#ConnectorsLabelCanBeEdited";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.addConnector(
			connectorIn = "end",
			connectorLabel = "StartEndConnector",
			connectorOut = "start",
			key_direction = "bottom");

		ProcessBuilderKaleoDesignerReact.editConnector(
			connectorLabel = "STARTENDCONNECTOR",
			newConnectorLabel = "EditedConnector");

		ProcessBuilderKaleoDesignerReact.viewConnectorPresent(connectorLabel = "EDITEDCONNECTOR");

		Workflow.saveDefinition(newKaleoDesigner = "True");

		Alert.viewSuccessMessageText(successMessage = "Workflow saved.");

		Workflow.openWorkflowListView();

		Workflow.gotoEditWorkflowDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.viewConnectorPresent(connectorLabel = "EDITEDCONNECTOR");
	}

	@description = "Verify that default label and ID for nodes are provided"
	@priority = "4"
	test DefaultLabelAndIDAreProvided {
		property test.name.skip.portal.instance = "ProcessBuilderKaleoDesignerReact#DefaultLabelAndIDAreProvided";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "Task",
			nodePosition = "20,-100",
			nodeType = "task");

		ProcessBuilderKaleoDesignerReact.viewNodeInfo(
			idValue = "item_2",
			labelValue = "Task",
			nodeType = "task");
	}

	@description = "Verify that default names for nodes are provided"
	@priority = "4"
	test DefaultLabelsAreProvided {
		property test.name.skip.portal.instance = "ProcessBuilderKaleoDesignerReact#DefaultLabelsAreProvided";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.viewNodeLabel(nodeLabel = "Start");

		ProcessBuilderKaleoDesignerReact.viewNodeLabel(nodeLabel = "End");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "Condition",
			nodePosition = "20,-300",
			nodeType = "condition");

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "Task",
			nodePosition = "20,-100",
			nodeType = "task");

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.viewNodeLabel(nodeLabel = "Condition");

		ProcessBuilderKaleoDesignerReact.viewNodeLabel(nodeLabel = "Task");
	}

	@description = "LPS-140056 - Verify that the changes on Default settings, for transitions, reflects on the diagram"
	@priority = "4"
	test DefaultSettingsChangesReflectsOnDiagram {
		property test.name.skip.portal.instance = "ProcessBuilderKaleoDesignerReact#DefaultSettingsChangesReflectsOnDiagram";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.addConnector(
			connectorIn = "end",
			connectorOut = "start",
			key_direction = "top");

		ProcessBuilderKaleoDesignerReact.editConnector(
			connectorLabel = "TRANSITION LABEL",
			newConnectorLabel = "LIFERAY LATAM");

		ProcessBuilderKaleoDesignerReact.viewConnectorPresent(connectorLabel = "LIFERAY LATAM");

		ProcessBuilderKaleoDesignerReact.viewDefaultToggleStatus(
			connectorLabel = "LIFERAY LATAM",
			defaultStatus = "True");

		ProcessBuilderKaleoDesignerReact.clickDefaultToggle(defaultConnector = "False");

		ProcessBuilderKaleoDesignerReact.viewDefaultToggleStatus(
			connectorLabel = "LIFERAY LATAM",
			defaultStatus = "False");
	}

	@description = "LPS-129928 - Verify that when hovering the Process Builder view button the text Diagram view is displayed"
	@priority = "2"
	test DiagramViewToolTipIsDisplayed {
		property test.name.skip.portal.instance = "ProcessBuilderKaleoDesignerReact#DiagramViewToolTipIsDisplayed";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.diagramSourceSwitchView();

		ProcessBuilderKaleoDesignerReact.viewSourceDiagramToolTipDisplayed(content = "Diagram View");
	}

	@description = "Verify that the Fork node must have at least two outgoing transitions"
	@ignore = "Test Stub"
	@priority = "4"
	test ForkNodeMustHaveMoreThanOneTransition {

		// TODO LRQA-72943 ForkNodeMustHaveMoreThanOneTransition pending implementation

	}

	@description = "Verify that each fork node requires a join node"
	@ignore = "Test Stub"
	@priority = "4"
	test ForkNodeRequiresJoinNode {

		// TODO LRQA-72942 ForkNodeRequiresJoinNode pending implementation

	}

	@description = "Verify that each type of Node has Actions property"
	@priority = "4"
	test HasActionsProperty {
		property test.name.skip.portal.instance = "ProcessBuilderKaleoDesignerReact#HasActionsProperty";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.selectNode(nodeType = "start");

		ProcessBuilderKaleoDesignerReact.viewAndFillActions();

		ProcessBuilderKaleoDesignerReact.selectNode(nodeType = "end");

		ProcessBuilderKaleoDesignerReact.viewAndFillActions();

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "Join",
			nodePosition = "-80,-40",
			nodeType = "join");

		ProcessBuilderKaleoDesignerReact.selectNode(nodeType = "join");

		ProcessBuilderKaleoDesignerReact.viewAndFillActions();

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "Join XOR",
			nodePosition = "-40,-200",
			nodeType = "join-xor");

		ProcessBuilderKaleoDesignerReact.selectNode(nodeType = "join-xor");

		ProcessBuilderKaleoDesignerReact.viewAndFillActions();

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "State",
			nodePosition = "50,-420",
			nodeType = "state");

		ProcessBuilderKaleoDesignerReact.selectNode(nodeType = "state");

		ProcessBuilderKaleoDesignerReact.viewAndFillActions();

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "Task",
			nodePosition = "20,-500",
			nodeType = "task");

		ProcessBuilderKaleoDesignerReact.selectNode(nodeType = "task");

		ProcessBuilderKaleoDesignerReact.viewAndFillActions();
	}

	@description = "Verify that each type of Node has Description property"
	@priority = "4"
	test HasDescriptionProperty {
		property test.name.skip.portal.instance = "ProcessBuilderKaleoDesignerReact#HasDescriptionProperty";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.viewNodeInfo(
			descriptionValue = "Begin a workflow.",
			nodeType = "start");

		ProcessBuilderKaleoDesignerReact.viewNodeInfo(
			descriptionValue = "Conclude the workflow.",
			nodeType = "end");

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "Fork",
			nodePosition = "20,-500",
			nodeType = "fork");

		ProcessBuilderKaleoDesignerReact.viewNodeInfo(
			descriptionValue = "Split the workflow into multiple paths.",
			nodeType = "fork");

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "Condition",
			nodePosition = "20,-100",
			nodeType = "condition");

		ProcessBuilderKaleoDesignerReact.viewNodeInfo(
			descriptionValue = "Execute conditional logic.",
			nodeType = "condition");
	}

	@description = "Verify that each type of Node has Notifications property"
	@priority = "4"
	test HasNotificationsProperty {
		property test.name.skip.portal.instance = "ProcessBuilderKaleoDesignerReact#HasNotificationsProperty";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.selectNode(nodeType = "start");

		ProcessBuilderKaleoDesignerReact.viewAndFillNotification(newNotification = "true");

		ProcessBuilderKaleoDesignerReact.selectNode(nodeType = "end");

		ProcessBuilderKaleoDesignerReact.viewAndFillNotification(newNotification = "true");

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "Fork",
			nodePosition = "20,-500",
			nodeType = "fork");

		ProcessBuilderKaleoDesignerReact.selectNode(nodeType = "fork");

		ProcessBuilderKaleoDesignerReact.viewAndFillNotification(newNotification = "true");

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "Condition",
			nodePosition = "20,-100",
			nodeType = "condition");

		ProcessBuilderKaleoDesignerReact.selectNode(nodeType = "condition");

		ProcessBuilderKaleoDesignerReact.viewAndFillNotification(newNotification = "true");
	}

	@description = "LPS-141713 - Verify that the imported workflow definition is shown in the Process Builder"
	@priority = "4"
	test ImportedProcessIsShownOnDiagram {
		property test.name.skip.portal.instance = "ProcessBuilderKaleoDesignerReact#ImportedProcessIsShownOnDiagram";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "Workflow Definition");

		ProcessBuilderKaleoDesignerReact.uploadDefinition(workflowDefinitionFile = "valid-imported-process-workflow-definition.xml");

		ProcessBuilderKaleoDesignerReact.diagramSourceSwitchView();

		ProcessBuilderKaleoDesignerReact.viewDiagramEditor(
			endLabelList = "Approve",
			joinLabelList = "Join",
			startLabelList = "Create",
			taskLabelList = "Analisis,Review");
	}

	@description = "LPS-129928 - Verify that the node coordinates are updated in Source when node is moved in diagram"
	@priority = "3"
	test NodeCoordinatedAreUpdated {
		property test.name.skip.portal.instance = "ProcessBuilderKaleoDesignerReact#NodeCoordinatedAreUpdated";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "Workflow Definition");

		ProcessBuilderKaleoDesignerReact.diagramSourceSwitchView();

		ProcessBuilderKaleoDesignerReact.viewXMLSourceNodeCoordinate(
			coordinateX = "300",
			coordinateY = "100",
			lineX = "15",
			lineY = "16",
			nodeLabel = "Start");

		ProcessBuilderKaleoDesignerReact.diagramSourceSwitchView();

		ProcessBuilderKaleoDesignerReact.dragAndDropDiagramNode(
			nodePosition = "100,-50",
			nodeType = "start");

		ProcessBuilderKaleoDesignerReact.diagramSourceSwitchView();

		ProcessBuilderKaleoDesignerReact.viewXMLSourceNodeCoordinate(
			coordinateX = "400",
			coordinateY = "50",
			lineX = "15",
			lineY = "16",
			nodeLabel = "Start");
	}

	@description = "LPS-139387 - Verify that the node info is displayed when the node is selected"
	@priority = "4"
	test NodeInfoIsDisplayedWhenNodeIsSelected {
		property test.name.skip.portal.instance = "ProcessBuilderKaleoDesignerReact#NodeInfoIsDisplayedWhenNodeIsSelected";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "Task",
			nodePosition = "20,-500",
			nodeType = "task");

		ProcessBuilderKaleoDesignerReact.editNodeInformationField(
			infoOption = "Id",
			infoValue = "TaskId01");

		ProcessBuilderKaleoDesignerReact.viewNodeInfo(
			idValue = "TaskId01",
			nodeType = "task");
	}

	@description = "LPS-139388 - Verify that the active node is highlighted on the diagram"
	@priority = "2"
	test NodeIsHighlightedWhenActive {
		property test.name.skip.portal.instance = "ProcessBuilderKaleoDesignerReact#NodeIsHighlightedWhenActive";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "Task",
			nodePosition = "-20,-40",
			nodeType = "task");

		ProcessBuilderKaleoDesignerReact.viewActiveNodeHighlighted(nodeType = "task");

		ProcessBuilderKaleoDesignerReact.viewInactiveNodeNotHighlighted(nodeType = "end");
	}

	@description = "LPS-129928 - Verify that the Publish button turns unavailable after the Workflow is published"
	@priority = "3"
	test PublishButtonTurnsUnavailableAfterPublish {
		property test.name.skip.portal.instance = "ProcessBuilderKaleoDesignerReact#PublishButtonTurnsUnavailableAfterPublish";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.addConnector(
			connectorIn = "end",
			connectorLabel = "Start Task Connector",
			connectorOut = "start",
			key_direction = "top");

		PortletEntry.publish();

		ProcessBuilderKaleoDesignerReact.viewPublishButtonNotPresent();
	}

	@description = "LPS-129928 - Verify that when hovering the Source button the text Source view is displayed"
	@priority = "2"
	test SourceViewToolTipIsDisplayed {
		property test.name.skip.portal.instance = "ProcessBuilderKaleoDesignerReact#SourceViewToolTipIsDisplayed";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.viewSourceDiagramToolTipDisplayed(content = "Source View");
	}

	@description = "Verify that Start node can't have incoming transition"
	@priority = "4"
	test StartNodeCanNotHaveIncomingTransition {
		property test.name.skip.portal.instance = "ProcessBuilderKaleoDesignerReact#StartNodeCanNotHaveIncomingTransition";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "Task",
			nodePosition = "-20,-40",
			nodeType = "task");

		ProcessBuilderKaleoDesignerReact.addConnector(
			connectorIn = "end",
			connectorLabel = "Task End Connector",
			connectorOut = "task",
			direction = "top",
			selectedNode = "true");

		ProcessBuilderKaleoDesignerReact.viewConnectorPresent(connectorLabel = "TASK END CONNECTOR");

		ProcessBuilderKaleoDesignerReact.selectNode(nodeType = "task");

		ProcessBuilderKaleoDesignerReact.addIncomingConnectorNotPossible(
			connectorIn = "start",
			connectorLabel = "Task Start Connector",
			connectorOut = "task",
			direction = "right");

		ProcessBuilderKaleoDesignerReact.viewConnectorNotPresent(connectorLabel = "TASK START CONNECTOR");
	}

	@description = "Verify that the Start Node must have an outgoing transition"
	@ignore = "Test Stub"
	@priority = "4"
	test StartNodeMustHaveOutgoingTransition {

		// TODO LRQA-72939 StartNodeMustHaveOutgoingTransition pending implementation

	}

	@description = "LPS-139387 - Verify that the Node ID is a required field"
	@priority = "3"
	test StepIDIsRequired {
		property test.name.skip.portal.instance = "ProcessBuilderKaleoDesignerReact#StepIDIsRequired";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "Task",
			nodePosition = "-20,-40",
			nodeType = "task");

		ProcessBuilderKaleoDesignerReact.editNodeInformationField(
			infoOption = "Id",
			infoValue = " ");

		ProcessBuilderKaleoDesignerReact.viewRequiredField(
			requiredField = "nodeId",
			save = "true");
	}

	@description = "LPS-139387 - Verify that the user can not use the same name for more than one node"
	@priority = "5"
	test StepIDIsUnique {
		property test.name.skip.portal.instance = "ProcessBuilderKaleoDesignerReact#StepIDIsUnique";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.selectNode(nodeType = "end");

		ProcessBuilderKaleoDesignerReact.editNodeInformationField(
			infoOption = "Id",
			infoValue = "item_0");

		ProcessBuilderKaleoDesignerReact.viewSidebarFeedback(sidebarMessage = "A node with that ID already exists. Enter a unique ID.");
	}

	@description = "LPS-139387 - Verify that the Step Label is a required field"
	@priority = "3"
	test StepLabelIsRequired {
		property test.name.skip.portal.instance = "ProcessBuilderKaleoDesignerReact#StepLabelIsRequired";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "Task",
			nodePosition = "-20,-40",
			nodeType = "task");

		ProcessBuilderKaleoDesignerReact.editNodeInformationField(
			infoOption = "Label",
			infoValue = " ");

		ProcessBuilderKaleoDesignerReact.viewRequiredField(
			requiredField = "nodeLabel",
			save = "true");
	}

	@description = "Verify that the Task node has Timers property"
	@priority = "4"
	test TaskNodeHasTimersProperty {
		property test.name.skip.portal.instance = "ProcessBuilderKaleoDesignerReact#TaskNodeHasTimersProperty";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Title");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "Task",
			nodePosition = "-20,-100",
			nodeType = "task");

		ProcessBuilderKaleoDesignerReact.selectNode(nodeType = "task");

		ProcessBuilderKaleoDesignerReact.viewFieldPresentOnSideBar(fieldName = "Timers");
	}

	@description = "LPS-130000 - Verify that the transitions do not lose the reference when the Task ID is changed"
	@priority = "5"
	test TransitionDoNotLoseReferenceOnTaskIDChange {
		property test.name.skip.portal.instance = "ProcessBuilderKaleoDesignerReact#TransitionDoNotLoseReferenceOnTaskIDChange";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "Task",
			nodePosition = "-20,-40",
			nodeType = "task");

		ProcessBuilderKaleoDesignerReact.addConnector(
			connectorIn = "task",
			connectorLabel = "Start-Task Connector",
			connectorOut = "start",
			key_direction = "right");

		ProcessBuilderKaleoDesignerReact.addConnector(
			connectorIn = "end",
			connectorLabel = "Task-End Connector",
			connectorOut = "task",
			key_direction = "right");

		ProcessBuilderKaleoDesignerReact.viewConnectorPresent(connectorLabel = "START-TASK CONNECTOR");

		ProcessBuilderKaleoDesignerReact.viewConnectorPresent(connectorLabel = "TASK-END CONNECTOR");

		ProcessBuilderKaleoDesignerReact.selectNode(nodeType = "task");

		ProcessBuilderKaleoDesignerReact.editNodeInformationField(
			infoOption = "Id",
			infoValue = "Liferay01");

		ProcessBuilderKaleoDesignerReact.viewConnectorPresent(connectorLabel = "START-TASK CONNECTOR");

		ProcessBuilderKaleoDesignerReact.viewConnectorPresent(connectorLabel = "TASK-END CONNECTOR");
	}

	@description = "LPS-130000 - Verify that the transitions do not lose the reference when the Task ID is changed"
	@priority = "5"
	test TransitionIsDeletedWhenNodeIsDeleted {
		property test.name.skip.portal.instance = "ProcessBuilderKaleoDesignerReact#TransitionIsDeletedWhenNodeIsDeleted";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "Task",
			nodePosition = "-20,-40",
			nodeType = "task");

		ProcessBuilderKaleoDesignerReact.addConnector(
			connectorIn = "task",
			connectorLabel = "Start-Task Connector",
			connectorOut = "start",
			key_direction = "right");

		ProcessBuilderKaleoDesignerReact.addConnector(
			connectorIn = "end",
			connectorLabel = "Task-End Connector",
			connectorOut = "task",
			key_direction = "right");

		ProcessBuilderKaleoDesignerReact.selectNode(nodeType = "task");

		ProcessBuilderKaleoDesignerReact.deleteNodeOrConnection(title = "Delete Task Node");

		ProcessBuilderKaleoDesignerReact.viewPanelNodePresent(nodeType = "start");

		ProcessBuilderKaleoDesignerReact.viewPanelNodePresent(nodeType = "end");

		ProcessBuilderKaleoDesignerReact.viewPanelNodeNotPresent(nodeType = "task");

		ProcessBuilderKaleoDesignerReact.viewConnectorNotPresent(connectorLabel = "START-TASK CONNECTOR");

		ProcessBuilderKaleoDesignerReact.viewConnectorNotPresent(connectorLabel = "TASK-END CONNECTOR");
	}

	@description = "LPS-129928 - Verify that the translation dropdown closes when the user selects a language"
	@ignore = "Test Stub"
	@priority = "2"
	test TranslationDropdownClosesAfterSelection {

		// TODO LRQA-73002 TranslationDropdownClosesAfterSelection pending implementation

	}

	@description = "LPS-129928 - Verify that the translation dropdown closes when the user clicks out of it"
	@priority = "2"
	test TranslationDropdownClosesClickOut {
		property test.name.skip.portal.instance = "ProcessBuilderKaleoDesignerReact#TranslationDropdownClosesClickOut";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.viewTranslationDropdown(translationOptionSelected = "en-us");

		ProcessBuilderKaleoDesignerReact.selectTranslationLanguage(translationOptionSelected = "en-us");

		ProcessBuilderKaleoDesignerReact.viewTranslationDropdownNotPresent();
	}

	@description = "Verify that a message warning is displayed when the user adds another transition and selects it as default"
	@ignore = "Test Stub"
	@priority = "3"
	test WarningIsDisplayedWhenNewTransitionDefault {

		// TODO LRQA-73832 WarningIsDisplayedWhenNewTransitionDefault pending implementation

	}

	@description = "Verify that a message warning is not displayed when the user adds another transition and do not selects it as default"
	@ignore = "Test Stub"
	@priority = "3"
	test WarningIsNotDisplayedWhenNewTransitionNotDefault {

		// TODO LRQA-73833 WarningIsNotDisplayedWhenNewTransitionNotDefault pending implementation

	}

}