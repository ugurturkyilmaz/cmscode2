import com.liferay.gradle.plugins.defaults.tasks.CopyIvyDependenciesTask
import com.liferay.gradle.plugins.source.formatter.FormatSourceTask
import com.liferay.gradle.plugins.util.PortalTools
import com.liferay.gradle.util.FileUtil
import com.liferay.gradle.util.StringUtil

import java.util.regex.Matcher

import org.gradle.util.GUtil

buildscript {
	apply from: file("build-buildscript.gradle"), to: buildscript
}

apply plugin: "com.liferay.source.formatter"
apply plugin: "com.liferay.source.formatter.defaults"

task appendHotfixQualifier
task formatSourceCurrentBranch(type: FormatSourceTask)
task formatSourceLatestAuthor(type: FormatSourceTask)
task formatSourceLocalChanges(type: FormatSourceTask)
task printDependencyPath
task removeHotfixQualifier
task setUpLibs
task setUpPortalTools
task setUpYarnOfflineCache
task updateYarnBinariesCache
task wrapperPortal(type: Wrapper)
task wrapperProjectTemplates(type: Wrapper)
task wrapperSubrepo(type: Wrapper)

FileTree libDependenciesFileTree = fileTree(dir: "../lib", include: "*/dependencies.properties")

Map<File, Properties> libDependenciesMap = libDependenciesFileTree.collectEntries {
	Properties properties = GUtil.loadProperties(it)

	[it.parentFile, properties]
}

appendHotfixQualifier {
	doLast {
		String dirs = System.getProperty("patcher.hotfix.dirs", "")
		String qualifier = System.getProperty("patcher.hotfix.qualifier", "")

		for (String dirName : dirs.split(",")) {
			File bndBndFile = new File(new File(projectDir, dirName), "bnd.bnd")

			if (bndBndFile.exists()) {
				Properties properties = GUtil.loadProperties(bndBndFile)

				String version = properties.getProperty("Bundle-Version")

				if ((version != null) && (version.indexOf(qualifier) == -1)) {
					String newLine = "Bundle-Version: " + version + qualifier
					String oldLine = bndBndFile.filterLine {
						it =~ "^Bundle-Version.*"
					}

					bndBndFile.text = bndBndFile.text.replace(oldLine.trim(), newLine)

					logger.lifecycle "Appended {}:{}", project.relativePath(bndBndFile), qualifier
				}
			}
		}
	}
}

formatSourceCurrentBranch {
	description = "Runs Liferay Source Formatter to format the project files that are added or modified in the current Git branch."
	formatCurrentBranch = true
}

formatSourceLatestAuthor {
	description = "Runs Liferay Source Formatter to format the project files that are added or modified in the latest Git commits of the same author."
	formatCurrentBranch = true
}

formatSourceLocalChanges {
	description = "Runs Liferay Source Formatter to format the unstaged project files."
	formatLocalChanges = true
}

printDependencyPath {
	doLast {
		assert project.properties["dependencyNotation"] : "Please provide a value for the '-PdependencyNotation' property"

		Dependency dependency = dependencies.create dependencyNotation

		Configuration configuration = configurations.detachedConfiguration dependency

		configuration.transitive = false

		logger.quiet configuration.singleFile.absolutePath
	}
}

removeHotfixQualifier {
	doLast {
		String dirs = System.getProperty("patcher.hotfix.dirs", "")
		String qualifier = System.getProperty("patcher.hotfix.qualifier", "")

		for (String dirName : dirs.split(",")) {
			File bndBndFile = new File(new File(projectDir, dirName), "bnd.bnd")

			if (bndBndFile.exists()) {
				Properties properties = GUtil.loadProperties(bndBndFile)

				String version = properties.getProperty("Bundle-Version")

				if ((version != null) && (version.indexOf(qualifier) != -1)) {
					bndBndFile.text = bndBndFile.text.replace(version, version.minus(qualifier))

					logger.lifecycle "Removed {}:{}", project.relativePath(bndBndFile), qualifier
				}
			}
		}
	}
}

repositories {
	mavenLocal()

	File tmpMavenRepositoryDir = file("../.m2-tmp")

	if (tmpMavenRepositoryDir.exists()) {
		maven {
			url tmpMavenRepositoryDir
		}
	}

	maven {
		url System.properties["repository.url"] ?: "https://repository-cdn.liferay.com/nexus/content/groups/public"
	}

	String repositoryPrivateURL = System.getProperty("repository.private.url")

	if (repositoryPrivateURL) {
		maven {
			credentials {
				password System.properties["repository.private.password"]
				username System.properties["repository.private.username"]
			}
			url repositoryPrivateURL
		}
	}
}

setUpYarnOfflineCache {
	doFirst {
		logger.lifecycle "Checking Yarn binaries cache directories"
	}
}

updateYarnBinariesCache {
	doFirst {
		logger.lifecycle "Updating Yarn binaries cache directories"
	}
}

wrapperPortal {
	File wrapperDir = projectDir.parentFile

	distributionUrl = "../../tools/gradle-${gradle.gradleVersion}.LIFERAY-PATCHED-1-bin.zip"
	dependsOn wrapperSubrepo

	doLast {
		File gradlewFile = new File(wrapperDir, "gradlew")

		ant.replace(
			failOnNoReplacements: true,
			file: gradlewFile,
			token: '# Escape application args',
			value: '''\
# Escape application args
DEFAULT_JVM_OPTS="$DEFAULT_JVM_OPTS \\\"-Dgradle.user.home=$APP_HOME/.gradle\\\""'''
		)

		ant.replace(
			failOnNoReplacements: true,
			file: gradlewFile,
			token: 'org.gradle.wrapper.GradleWrapperMain "$APP_ARGS"',
			value: 'org.gradle.wrapper.GradleWrapperMain "--init-script=$APP_HOME/modules/init.gradle" "$APP_ARGS"'
		)

		File gradlewBatFile = new File(wrapperDir, "gradlew.bat")

		ant.replace(
			failOnNoReplacements: true,
			file: gradlewBatFile,
			token: '@rem Setup the command line',
			value: '''\
@rem Setup the command line
set DEFAULT_JVM_OPTS=%DEFAULT_JVM_OPTS% "-Dgradle.user.home=%APP_HOME%\\.gradle"'''
		)

		ant.replace(
			failOnNoReplacements: true,
			file: gradlewBatFile,
			token: 'org.gradle.wrapper.GradleWrapperMain %*',
			value: 'org.gradle.wrapper.GradleWrapperMain "--init-script=%APP_HOME%\\modules\\init.gradle" %*'
		)
	}

	jarFile = new File(wrapperDir, "gradle/wrapper/gradle-wrapper.jar")
	scriptFile = new File(wrapperDir, "gradlew")
}

wrapperProjectTemplates {
	File wrapperDir = new File(projectDir.parentFile, "modules/sdk/project-templates/project-templates/src/main/resources/gradle-wrapper")

	jarFile = new File(wrapperDir, "gradle/wrapper/gradle-wrapper.jar")
	scriptFile = new File(wrapperDir, "gradlew")

	doLast {
		File gradleWrapperPropertiesFile = new File(wrapperDir, "gradle/wrapper/gradle-wrapper.properties")

		gradleWrapperPropertiesFile.text = gradleWrapperPropertiesFile.text.trim()
	}
}

wrapperSubrepo {
	File wrapperDir = new File(projectDir.parentFile, "tools/subrepo")

	doLast {
		File gradlewFile = new File(wrapperDir, "gradlew")

		ant.replace(
			failOnNoReplacements: true,
			file: gradlewFile,
			token: '# Escape application args',
			value: '''\
# Escape application args
DEFAULT_JVM_OPTS="$DEFAULT_JVM_OPTS \\\"-Dgradle.user.home=$APP_HOME/.gradle\\\""'''
		)

		File gradlewBatFile = new File(wrapperDir, "gradlew.bat")

		ant.replace(
			failOnNoReplacements: true,
			file: gradlewBatFile,
			token: '@rem Setup the command line',
			value: '''\
@rem Setup the command line
set DEFAULT_JVM_OPTS=%DEFAULT_JVM_OPTS% "-Dgradle.user.home=%APP_HOME%\\.gradle"'''
		)
	}

	jarFile = new File(wrapperDir, "gradle/wrapper/gradle-wrapper.jar")
	scriptFile = new File(wrapperDir, "gradlew")
}

tasks.withType(FormatSourceTask) {
	baseDirName = "../"
	group = "formatting"
}

_createSetUpLibTasks(libDependenciesMap)
_createSetUpPortalToolTasks()
_createYarnTasks()

private String _camelCase(String dirName) {
	String suffix = dirName.replaceAll(/\.(\w)/) {
		String s = it[1]

		s.toUpperCase()
	}

	return StringUtil.capitalize(suffix)
}

private void _createSetUpLibTasks(Map<File, Properties> libDependenciesMap) {
	libDependenciesMap.each {
		File dir, Properties properties ->

		String libSuffix = StringUtil.capitalize(dir.name)

		Configuration libConfiguration = configurations.create("lib" + libSuffix)

		libConfiguration.transitive = false

		Task libTask = tasks.create(name: "setUpLib" + libSuffix, type: Copy) {
			from libConfiguration
			into dir
		}

		for (String fileTitle in properties.stringPropertyNames()) {
			String dependencyNotation = properties.getProperty(fileTitle)

			def dependency = dependencies.add(libConfiguration.name, dependencyNotation)

			DependencyArtifact dependencyArtifact = dependency.artifacts.find()

			if (dependencyArtifact) {
				libTask.rename "${dependency.name}-${dependency.version}-${dependencyArtifact.classifier}.jar", "${fileTitle}.jar"
			}
			else {
				libTask.rename "${dependency.name}-${dependency.version}.jar", "${fileTitle}.jar"
			}
		}

		setUpLibs.dependsOn libTask
	}
}

private void _createSetUpPortalToolTasks() {
	FileTree ivyXmlFileTree = fileTree(dir: "../tools/sdk", includes: ["ivy.xml", "dependencies/*/ivy.xml"])

	ivyXmlFileTree.each {
		File ivyXmlFile ->

		File portalToolDir = ivyXmlFile.parentFile

		CopyIvyDependenciesTask copyIvyDependenciesTask = tasks.create(name: "setUp" + _camelCase(portalToolDir.name), type: CopyIvyDependenciesTask) {
			configuration.exclude group: "com.liferay.portal"

			dependencyTransformClosure = {
				Map<String, Object> dependencyNotation ->

				String version = PortalTools.getVersion(project, dependencyNotation["name"])

				if (version) {
					dependencyNotation["version"] = version
				}

				dependencyNotation
			}

			if (ivyXmlFile.parentFile.name != "sdk") {
				doFirst {
					delete destinationDir
				}
			}

			inputFile = ivyXmlFile
			into new File(portalToolDir, "lib")

			outputs.upToDateWhen {
				false
			}
		}

		setUpPortalTools.dependsOn copyIvyDependenciesTask
	}
}

private void _createYarnTasks() {
	FileTree yarnLockFileTree = fileTree(dir: rootDir, includes: ["yarn.lock", "private/yarn.lock", "apps/*/yarn.lock", "private/apps/*/yarn.lock"])

	yarnLockFileTree.each {
		File yarnLockFile ->

		if (project.findProperty("build.binaries.cache.dir")) {
			File cacheDir = new File(rootDir.parentFile, project.findProperty("build.binaries.cache.dir"))
			String relativePath = FileUtil.relativize(yarnLockFile.parentFile, rootDir)

			File nodeModulesCacheDir = new File(yarnLockFile.parentFile, "node_modules_cache")
			File offlineCacheDir = new File(cacheDir, ".yarn/" + relativePath + "/offline-cache")

			Task yarnTask = tasks.create(name: "setUpYarnOfflineCache" + _camelCase(yarnLockFile.parentFile.name), type: Copy) {
				from offlineCacheDir
				into nodeModulesCacheDir

				doFirst {
					logger.lifecycle "Copying {} into {}", offlineCacheDir, nodeModulesCacheDir
				}
			}

			setUpYarnOfflineCache.finalizedBy yarnTask

			yarnTask = tasks.create(name: "updateYarnBinariesCache" + _camelCase(yarnLockFile.parentFile.name), type: Copy) {
				from nodeModulesCacheDir
				into offlineCacheDir

				doFirst {
					logger.lifecycle "Copying {} into {}", nodeModulesCacheDir, offlineCacheDir
				}
			}

			updateYarnBinariesCache.finalizedBy yarnTask
		}
	}
}